{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# Weights and Biases
let weights_layer_1 = [[60049, 60073],
    [41419, 41425]]
let biases_layer_1 = [ -25905, -63563 ]
let weights_layer_2 = [[83296, -89714]]
let biases_layer_2 = [ -38117 ]

# Linear Forward Functions
func linear_forward_1(input: List[Int], weights: List[List[Int]], biases: List[Int]) = {
    let weighted_sum1 = (input[0] * weights[0][0] + input[1] * weights[0][1]) / 10000 + biases[0]
    let weighted_sum2 = (input[0] * weights[1][0] + input[1] * weights[1][1]) / 10000 + biases[1]
    [weighted_sum1, weighted_sum2]
}

func linear_forward_2(input: List[Int], weights: List[List[Int]], biases: List[Int]) = {
    let weighted_sum1 = (input[0] * weights[0][0] + input[1] * weights[0][1]) / 10000 + biases[0]
    [weighted_sum1]
}

# Activation Functions
# Approximate Sigmoid function using a piecewise linear function
func sigmoid(input: Int) = {
    if (input < -80000) then 0
    else if (input < -60000) then fraction(input + 80000, 125, 10000)
    else if (input < -40000) then fraction(input + 60000, 100, 10000)
    else if (input < -20000) then fraction(input + 40000, 75, 10000)
    else if (input < 0) then fraction(input + 20000, 50, 10000)
    else if (input < 20000) then fraction(input, 50, 10000) + 5000
    else if (input < 40000) then fraction(input - 20000, 75, 10000) + 7500
    else if (input < 60000) then fraction(input - 40000, 100, 10000) + 8750
    else if (input < 80000) then fraction(input - 60000, 125, 10000) + 9375
    else 10000
}
# Sigmoid activation function for a list of values
func sigmoid_activation(inputs: List[Int], num_outputs: Int) = {
    [sigmoid(inputs[0]), sigmoid(inputs[1])]
}

# Predict Function
@Callable(i)
func predict(x1: Int, x2: Int) = {
    # Scale inputs
    let x1_scaled = x1 * 10000
    let x2_scaled = x2 * 10000
    let inputs = [x1_scaled, x2_scaled]
    let z1 = linear_forward_1(inputs, weights_layer_1, biases_layer_1)
    let a1 = sigmoid_activation(z1, 2)
    let z2 = linear_forward_2(a1, weights_layer_2, biases_layer_2)
    let a2 = sigmoid_activation(z2, 1)
    # Scaling back the output
    let result0 = a2[0]
    let debug_outputs = []
    [
        IntegerEntry("move_prediction_0", result0)
    ] ++ debug_outputs
}