{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# Weights and Biases
let weights_layer_1 = [[440, 263, 80, 832, 157, 871, -3443, 6525, 2264, 12134, 1134, -51353, 1832, -2405, 1360, -201, 2238, -3293, 9374, -4494, -12975, -3745, -843],
    [-1163, -494, 1955, 3825, 6, -5601, 7277, -8068, -11810, -12438, -4556, 3096, 11035, 8171, -84, -1378, -996, -700, -9483, 1683, 2220, 3393, 6036],
    [459, 1273, 1002, 442, 138, 2885, -65, 5923, -3229, 10063, 1668, -46093, -5033, 3551, -1014, 1830, -5551, 2703, 11366, -2135, -7642, -7329, -264],
    [1170, 2070, -475, 483, -1680, -4946, 2839, 1968, 3681, 8620, 7629, 558, -16905, -1707, -1496, 7176, -11104, -87, 12690, 1255, -1548, 564, -5317],
    [3154, 1899, 447, 692, -274, -2727, 1214, 5594, 8318, 13291, 8885, 5056, -5624, 994, -149, -1587, 857, 2640, 16282, 9880, 3222, 261, -6537],
    [-1149, 55, 1897, 3704, -175, -6504, 4850, -10116, -11023, -8859, -5620, 2234, 14007, 8143, 1670, -1720, -1043, -3636, -9141, 3771, -3228, 3475, 6004],
    [-1054, 832, 165, 1606, 768, 616, 79, 4333, 155, 6490, 712, -49359, 3982, -2901, -571, -174, 929, -560, 15438, -34830, -12181, -4678, -3369],
    [-159, -168, 337, 504, 205, 3078, -1034, 5998, -328, 6437, 708, -53601, 2764, -2814, -1226, 107, -1577, 1545, 9615, -4621, -13957, -2408, -1904],
    [-888, 1990, 896, 1305, -354, 5662, -2660, 5793, 9015, 16293, 6941, -5088, -8168, -7652, 118, 155, 1068, 4302, 14550, -6067, -2319, -7988, -4884],
    [810, 1690, 254, 996, -163, 18, 2896, -55376, -9581, -3235, -1320, 1806, 861, 3663, 1263, -52455, -12984, -2928, 744, 781, -550, -702, -2671],
    [940, 147, 589, 855, -20, 1435, -845, 4281, 3621, 11424, -1055, -38307, 1531, -2608, -1227, -1424, 3285, -2988, 15133, 1012, 1063, -1890, -5082],
    [576, -188, -206, -123, 284, 2081, -896, 10856, 7790, 8463, 6906, -6140, -8164, -2810, -675, 565, 1479, 2437, 13236, -3503, 42, -4829, -6167],
    [-1915, 2660, 2177, 4562, 1794, -7883, 5765, -9931, -14914, -8032, -6922, 4421, 8786, 5428, -553, -1148, 650, -1942, -11333, -496, 2843, 2110, 5306],
    [-73, 6231, 2861, 1939, 267, 3346, -2404, 7073, 7450, 14237, 3593, 484, -9579, -4649, 1681, 753, 779, 1172, 15938, 1131, -2178, -2183, -3288],
    [-306, 2538, 1410, 2470, 60, 4864, -2122, 6555, 8693, 15462, 7011, 234, -10439, -5629, -1635, 3117, 2215, -193, 17919, 1430, -3699, -1846, -3940]]
let biases_layer_1 = [ 3906, 3401, -259, -1042, -1164, 4297, 3329, 1815, 2801, 1590, 1476, 92, 3394, 1949, 2193 ]
let weights_layer_2 = [[19327, -3409, 11264, 6095, 7279, -7313, 20721, 21203, 3092, -41727, 4531, -184, -5261, 4689, 2885],
    [-20754, 5375, -10888, -8381, -8486, 4371, -21296, -20421, -4720, 42861, -5008, 2014, 3364, -3504, -2111]]
let biases_layer_2 = [ -827, -1849 ]

# Linear Forward Functions
func linear_forward_1(input: List[Int], weights: List[List[Int]], biases: List[Int]) = {
    let weighted_sum1 = (input[0] * weights[0][0] + input[1] * weights[0][1] + input[2] * weights[0][2] + input[3] * weights[0][3] + input[4] * weights[0][4] + input[5] * weights[0][5] + input[6] * weights[0][6] + input[7] * weights[0][7] + input[8] * weights[0][8] + input[9] * weights[0][9] + input[10] * weights[0][10] + input[11] * weights[0][11] + input[12] * weights[0][12] + input[13] * weights[0][13] + input[14] * weights[0][14] + input[15] * weights[0][15] + input[16] * weights[0][16] + input[17] * weights[0][17] + input[18] * weights[0][18] + input[19] * weights[0][19] + input[20] * weights[0][20] + input[21] * weights[0][21] + input[22] * weights[0][22]) / 10000 + biases[0]
    let weighted_sum2 = (input[0] * weights[1][0] + input[1] * weights[1][1] + input[2] * weights[1][2] + input[3] * weights[1][3] + input[4] * weights[1][4] + input[5] * weights[1][5] + input[6] * weights[1][6] + input[7] * weights[1][7] + input[8] * weights[1][8] + input[9] * weights[1][9] + input[10] * weights[1][10] + input[11] * weights[1][11] + input[12] * weights[1][12] + input[13] * weights[1][13] + input[14] * weights[1][14] + input[15] * weights[1][15] + input[16] * weights[1][16] + input[17] * weights[1][17] + input[18] * weights[1][18] + input[19] * weights[1][19] + input[20] * weights[1][20] + input[21] * weights[1][21] + input[22] * weights[1][22]) / 10000 + biases[1]
    let weighted_sum3 = (input[0] * weights[2][0] + input[1] * weights[2][1] + input[2] * weights[2][2] + input[3] * weights[2][3] + input[4] * weights[2][4] + input[5] * weights[2][5] + input[6] * weights[2][6] + input[7] * weights[2][7] + input[8] * weights[2][8] + input[9] * weights[2][9] + input[10] * weights[2][10] + input[11] * weights[2][11] + input[12] * weights[2][12] + input[13] * weights[2][13] + input[14] * weights[2][14] + input[15] * weights[2][15] + input[16] * weights[2][16] + input[17] * weights[2][17] + input[18] * weights[2][18] + input[19] * weights[2][19] + input[20] * weights[2][20] + input[21] * weights[2][21] + input[22] * weights[2][22]) / 10000 + biases[2]
    let weighted_sum4 = (input[0] * weights[3][0] + input[1] * weights[3][1] + input[2] * weights[3][2] + input[3] * weights[3][3] + input[4] * weights[3][4] + input[5] * weights[3][5] + input[6] * weights[3][6] + input[7] * weights[3][7] + input[8] * weights[3][8] + input[9] * weights[3][9] + input[10] * weights[3][10] + input[11] * weights[3][11] + input[12] * weights[3][12] + input[13] * weights[3][13] + input[14] * weights[3][14] + input[15] * weights[3][15] + input[16] * weights[3][16] + input[17] * weights[3][17] + input[18] * weights[3][18] + input[19] * weights[3][19] + input[20] * weights[3][20] + input[21] * weights[3][21] + input[22] * weights[3][22]) / 10000 + biases[3]
    let weighted_sum5 = (input[0] * weights[4][0] + input[1] * weights[4][1] + input[2] * weights[4][2] + input[3] * weights[4][3] + input[4] * weights[4][4] + input[5] * weights[4][5] + input[6] * weights[4][6] + input[7] * weights[4][7] + input[8] * weights[4][8] + input[9] * weights[4][9] + input[10] * weights[4][10] + input[11] * weights[4][11] + input[12] * weights[4][12] + input[13] * weights[4][13] + input[14] * weights[4][14] + input[15] * weights[4][15] + input[16] * weights[4][16] + input[17] * weights[4][17] + input[18] * weights[4][18] + input[19] * weights[4][19] + input[20] * weights[4][20] + input[21] * weights[4][21] + input[22] * weights[4][22]) / 10000 + biases[4]
    let weighted_sum6 = (input[0] * weights[5][0] + input[1] * weights[5][1] + input[2] * weights[5][2] + input[3] * weights[5][3] + input[4] * weights[5][4] + input[5] * weights[5][5] + input[6] * weights[5][6] + input[7] * weights[5][7] + input[8] * weights[5][8] + input[9] * weights[5][9] + input[10] * weights[5][10] + input[11] * weights[5][11] + input[12] * weights[5][12] + input[13] * weights[5][13] + input[14] * weights[5][14] + input[15] * weights[5][15] + input[16] * weights[5][16] + input[17] * weights[5][17] + input[18] * weights[5][18] + input[19] * weights[5][19] + input[20] * weights[5][20] + input[21] * weights[5][21] + input[22] * weights[5][22]) / 10000 + biases[5]
    let weighted_sum7 = (input[0] * weights[6][0] + input[1] * weights[6][1] + input[2] * weights[6][2] + input[3] * weights[6][3] + input[4] * weights[6][4] + input[5] * weights[6][5] + input[6] * weights[6][6] + input[7] * weights[6][7] + input[8] * weights[6][8] + input[9] * weights[6][9] + input[10] * weights[6][10] + input[11] * weights[6][11] + input[12] * weights[6][12] + input[13] * weights[6][13] + input[14] * weights[6][14] + input[15] * weights[6][15] + input[16] * weights[6][16] + input[17] * weights[6][17] + input[18] * weights[6][18] + input[19] * weights[6][19] + input[20] * weights[6][20] + input[21] * weights[6][21] + input[22] * weights[6][22]) / 10000 + biases[6]
    let weighted_sum8 = (input[0] * weights[7][0] + input[1] * weights[7][1] + input[2] * weights[7][2] + input[3] * weights[7][3] + input[4] * weights[7][4] + input[5] * weights[7][5] + input[6] * weights[7][6] + input[7] * weights[7][7] + input[8] * weights[7][8] + input[9] * weights[7][9] + input[10] * weights[7][10] + input[11] * weights[7][11] + input[12] * weights[7][12] + input[13] * weights[7][13] + input[14] * weights[7][14] + input[15] * weights[7][15] + input[16] * weights[7][16] + input[17] * weights[7][17] + input[18] * weights[7][18] + input[19] * weights[7][19] + input[20] * weights[7][20] + input[21] * weights[7][21] + input[22] * weights[7][22]) / 10000 + biases[7]
    let weighted_sum9 = (input[0] * weights[8][0] + input[1] * weights[8][1] + input[2] * weights[8][2] + input[3] * weights[8][3] + input[4] * weights[8][4] + input[5] * weights[8][5] + input[6] * weights[8][6] + input[7] * weights[8][7] + input[8] * weights[8][8] + input[9] * weights[8][9] + input[10] * weights[8][10] + input[11] * weights[8][11] + input[12] * weights[8][12] + input[13] * weights[8][13] + input[14] * weights[8][14] + input[15] * weights[8][15] + input[16] * weights[8][16] + input[17] * weights[8][17] + input[18] * weights[8][18] + input[19] * weights[8][19] + input[20] * weights[8][20] + input[21] * weights[8][21] + input[22] * weights[8][22]) / 10000 + biases[8]
    let weighted_sum10 = (input[0] * weights[9][0] + input[1] * weights[9][1] + input[2] * weights[9][2] + input[3] * weights[9][3] + input[4] * weights[9][4] + input[5] * weights[9][5] + input[6] * weights[9][6] + input[7] * weights[9][7] + input[8] * weights[9][8] + input[9] * weights[9][9] + input[10] * weights[9][10] + input[11] * weights[9][11] + input[12] * weights[9][12] + input[13] * weights[9][13] + input[14] * weights[9][14] + input[15] * weights[9][15] + input[16] * weights[9][16] + input[17] * weights[9][17] + input[18] * weights[9][18] + input[19] * weights[9][19] + input[20] * weights[9][20] + input[21] * weights[9][21] + input[22] * weights[9][22]) / 10000 + biases[9]
    let weighted_sum11 = (input[0] * weights[10][0] + input[1] * weights[10][1] + input[2] * weights[10][2] + input[3] * weights[10][3] + input[4] * weights[10][4] + input[5] * weights[10][5] + input[6] * weights[10][6] + input[7] * weights[10][7] + input[8] * weights[10][8] + input[9] * weights[10][9] + input[10] * weights[10][10] + input[11] * weights[10][11] + input[12] * weights[10][12] + input[13] * weights[10][13] + input[14] * weights[10][14] + input[15] * weights[10][15] + input[16] * weights[10][16] + input[17] * weights[10][17] + input[18] * weights[10][18] + input[19] * weights[10][19] + input[20] * weights[10][20] + input[21] * weights[10][21] + input[22] * weights[10][22]) / 10000 + biases[10]
    let weighted_sum12 = (input[0] * weights[11][0] + input[1] * weights[11][1] + input[2] * weights[11][2] + input[3] * weights[11][3] + input[4] * weights[11][4] + input[5] * weights[11][5] + input[6] * weights[11][6] + input[7] * weights[11][7] + input[8] * weights[11][8] + input[9] * weights[11][9] + input[10] * weights[11][10] + input[11] * weights[11][11] + input[12] * weights[11][12] + input[13] * weights[11][13] + input[14] * weights[11][14] + input[15] * weights[11][15] + input[16] * weights[11][16] + input[17] * weights[11][17] + input[18] * weights[11][18] + input[19] * weights[11][19] + input[20] * weights[11][20] + input[21] * weights[11][21] + input[22] * weights[11][22]) / 10000 + biases[11]
    let weighted_sum13 = (input[0] * weights[12][0] + input[1] * weights[12][1] + input[2] * weights[12][2] + input[3] * weights[12][3] + input[4] * weights[12][4] + input[5] * weights[12][5] + input[6] * weights[12][6] + input[7] * weights[12][7] + input[8] * weights[12][8] + input[9] * weights[12][9] + input[10] * weights[12][10] + input[11] * weights[12][11] + input[12] * weights[12][12] + input[13] * weights[12][13] + input[14] * weights[12][14] + input[15] * weights[12][15] + input[16] * weights[12][16] + input[17] * weights[12][17] + input[18] * weights[12][18] + input[19] * weights[12][19] + input[20] * weights[12][20] + input[21] * weights[12][21] + input[22] * weights[12][22]) / 10000 + biases[12]
    let weighted_sum14 = (input[0] * weights[13][0] + input[1] * weights[13][1] + input[2] * weights[13][2] + input[3] * weights[13][3] + input[4] * weights[13][4] + input[5] * weights[13][5] + input[6] * weights[13][6] + input[7] * weights[13][7] + input[8] * weights[13][8] + input[9] * weights[13][9] + input[10] * weights[13][10] + input[11] * weights[13][11] + input[12] * weights[13][12] + input[13] * weights[13][13] + input[14] * weights[13][14] + input[15] * weights[13][15] + input[16] * weights[13][16] + input[17] * weights[13][17] + input[18] * weights[13][18] + input[19] * weights[13][19] + input[20] * weights[13][20] + input[21] * weights[13][21] + input[22] * weights[13][22]) / 10000 + biases[13]
    let weighted_sum15 = (input[0] * weights[14][0] + input[1] * weights[14][1] + input[2] * weights[14][2] + input[3] * weights[14][3] + input[4] * weights[14][4] + input[5] * weights[14][5] + input[6] * weights[14][6] + input[7] * weights[14][7] + input[8] * weights[14][8] + input[9] * weights[14][9] + input[10] * weights[14][10] + input[11] * weights[14][11] + input[12] * weights[14][12] + input[13] * weights[14][13] + input[14] * weights[14][14] + input[15] * weights[14][15] + input[16] * weights[14][16] + input[17] * weights[14][17] + input[18] * weights[14][18] + input[19] * weights[14][19] + input[20] * weights[14][20] + input[21] * weights[14][21] + input[22] * weights[14][22]) / 10000 + biases[14]
    [weighted_sum1, weighted_sum2, weighted_sum3, weighted_sum4, weighted_sum5, weighted_sum6, weighted_sum7, weighted_sum8, weighted_sum9, weighted_sum10, weighted_sum11, weighted_sum12, weighted_sum13, weighted_sum14, weighted_sum15]
}

func linear_forward_2(input: List[Int], weights: List[List[Int]], biases: List[Int]) = {
    let weighted_sum1 = (input[0] * weights[0][0] + input[1] * weights[0][1] + input[2] * weights[0][2] + input[3] * weights[0][3] + input[4] * weights[0][4] + input[5] * weights[0][5] + input[6] * weights[0][6] + input[7] * weights[0][7] + input[8] * weights[0][8] + input[9] * weights[0][9] + input[10] * weights[0][10] + input[11] * weights[0][11] + input[12] * weights[0][12] + input[13] * weights[0][13] + input[14] * weights[0][14]) / 10000 + biases[0]
    let weighted_sum2 = (input[0] * weights[1][0] + input[1] * weights[1][1] + input[2] * weights[1][2] + input[3] * weights[1][3] + input[4] * weights[1][4] + input[5] * weights[1][5] + input[6] * weights[1][6] + input[7] * weights[1][7] + input[8] * weights[1][8] + input[9] * weights[1][9] + input[10] * weights[1][10] + input[11] * weights[1][11] + input[12] * weights[1][12] + input[13] * weights[1][13] + input[14] * weights[1][14]) / 10000 + biases[1]
    [weighted_sum1, weighted_sum2]
}

# Activation Functions
# ReLU function
func relu(input: Int) = {
    if (input < 0) then 0
    else input
}
# ReLU activation function for a list of values
func relu_activation(inputs: List[Int], num_outputs: Int) = {
    [relu(inputs[0]), relu(inputs[1]), relu(inputs[2]), relu(inputs[3]), relu(inputs[4]), relu(inputs[5]), relu(inputs[6]), relu(inputs[7]), relu(inputs[8]), relu(inputs[9]), relu(inputs[10]), relu(inputs[11]), relu(inputs[12]), relu(inputs[13]), relu(inputs[14])]
}

# Predict Function
@Callable(i)
func predict(x1: Int, x2: Int, x3: Int, x4: Int, x5: Int, x6: Int, x7: Int, x8: Int, x9: Int, x10: Int, x11: Int, x12: Int, x13: Int, x14: Int, x15: Int, x16: Int, x17: Int, x18: Int, x19: Int, x20: Int, x21: Int, x22: Int, x23: Int) = {
    # Scale inputs
    let x1_scaled = x1 * 10000
    let x2_scaled = x2 * 10000
    let x3_scaled = x3 * 10000
    let x4_scaled = x4 * 10000
    let x5_scaled = x5 * 10000
    let x6_scaled = x6 * 10000
    let x7_scaled = x7 * 10000
    let x8_scaled = x8 * 10000
    let x9_scaled = x9 * 10000
    let x10_scaled = x10 * 10000
    let x11_scaled = x11 * 10000
    let x12_scaled = x12 * 10000
    let x13_scaled = x13 * 10000
    let x14_scaled = x14 * 10000
    let x15_scaled = x15 * 10000
    let x16_scaled = x16 * 10000
    let x17_scaled = x17 * 10000
    let x18_scaled = x18 * 10000
    let x19_scaled = x19 * 10000
    let x20_scaled = x20 * 10000
    let x21_scaled = x21 * 10000
    let x22_scaled = x22 * 10000
    let x23_scaled = x23 * 10000
    let inputs = [x1_scaled, x2_scaled, x3_scaled, x4_scaled, x5_scaled, x6_scaled, x7_scaled, x8_scaled, x9_scaled, x10_scaled, x11_scaled, x12_scaled, x13_scaled, x14_scaled, x15_scaled, x16_scaled, x17_scaled, x18_scaled, x19_scaled, x20_scaled, x21_scaled, x22_scaled, x23_scaled]
    let z1 = linear_forward_1(inputs, weights_layer_1, biases_layer_1)
    let a1 = relu_activation(z1, 15)
    let z2 = linear_forward_2(a1, weights_layer_2, biases_layer_2)
    let a2 = z2
    # Scaling back the output
    let result0 = a2[0]
    let result1 = a2[1]
    let debug_outputs = []
    [
        IntegerEntry("move_prediction_0", result0),
        IntegerEntry("move_prediction_1", result1)
    ] ++ debug_outputs
}