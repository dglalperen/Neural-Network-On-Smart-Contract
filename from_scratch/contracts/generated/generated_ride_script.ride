{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# Weights and Biases
let weights_layer_1 = [[60049, 60073],
    [41419, 41425]]
let biases_layer_1 = [ -25905, -63563 ]
let weights_layer_2 = [[83296, -89714]]
let biases_layer_2 = [ -38117 ]

# Linear Forward Functions
# Linear forward function for layer 1
func linear_forward_layer_1(input: List[Int]) = {
    let weighted_sum1 = (input[0] * weights_layer_1[0][0] + input[1] * weights_layer_1[0][1]) / 10000 + biases_layer_1[0]
    let weighted_sum2 = (input[0] * weights_layer_1[1][0] + input[1] * weights_layer_1[1][1]) / 10000 + biases_layer_1[1]
    [weighted_sum1, weighted_sum2]
}
# Linear forward function for layer 2
func linear_forward_layer_2(input: List[Int]) = {
    let weighted_sum1 = (input[0] * weights_layer_2[0][0] + input[1] * weights_layer_2[0][1]) / 10000 + biases_layer_2[0]
    [weighted_sum1]
}

# Activation Functions
# ReLU activation function for layer 1
func relu_layer_1(input: List[Int]) = {
    let out1 = if (input[0] > 0) then input[0] else 0
    let out2 = if (input[1] > 0) then input[1] else 0

    [out1, out2]
}
# Sigmoid activation function for layer 2
func sigmoid_layer_2(input: Int) = {
    if (input < -10000) then 0
    else if (input > 10000) then 10000
    else 5000 + input / 2
}

# Predict Function
@Callable(i)
func predict(x1: Int, x2: Int) = {
    # Scale inputs
    let x1_scaled = x1 * 10000
    let x2_scaled = x2 * 10000
    let inputs = [x1_scaled, x2_scaled]
    let z1 = linear_forward_layer_1(inputs)
    let a1 = relu_layer_1(z1)
    let z2 = linear_forward_layer_2(a1)
    let a2 = sigmoid_layer_2(z2[0])
    # Scaling back the output
    let result = a2 / 10000
    # Debug outputs
    let debug_outputs = [
        IntegerEntry("debug_z1_1", z1[0]), 
        IntegerEntry("debug_a1_1", a1[0]), 
        IntegerEntry("debug_z1_2", z1[1]), 
        IntegerEntry("debug_a1_2", a1[1]), 
        IntegerEntry("debug_z2_1", z2[0]), 
        IntegerEntry("debug_a2", a2), 
        IntegerEntry("debug_result", result)
    ]
    (
        debug_outputs,
        result
    )
}