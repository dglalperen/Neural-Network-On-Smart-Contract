{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# Weights and Biases
let weights_layer_1 = [[60049, 60073],
    [41419, 41425]]
let biases_layer_1 = [ -25905, -63563 ]
let weights_layer_2 = [[83296, -89714]]
let biases_layer_2 = [ -38117 ]

# Linear Forward Functions
# Linear forward function
func linear_forward(input: List[Int], weights: List[List[Int]], biases: List[Int]) = {
    let weighted_sum1 = (input[0] * weights[0][0] + input[1] * weights[0][1]) / 10000 + biases[0]
    let weighted_sum2 = (input[0] * weights[1][0] + input[1] * weights[1][1]) / 10000 + biases[1]
    [weighted_sum1, weighted_sum2]
}

# Activation Functions
# Sigmoid function
func sigmoid(input: Int) = {
    if (input < -10000) then 0
    else if (input > 10000) then 10000
    else 5000 + input / 2
}
# Sigmoid activation function for a list of values
func sigmoid_activation(inputs: List[Int]) = {
    [sigmoid(inputs[0]), sigmoid(inputs[1])]
}

# Predict Function
@Callable(i)
func predict(x1: Int, x2: Int) = {
    # Scale inputs
    let x1_scaled = x1 * 10000
    let x2_scaled = x2 * 10000
    let inputs = [x1_scaled, x2_scaled]
    let z1 = linear_forward(inputs, weights_layer_1, biases_layer_1)
    let a1 = sigmoid_activation(z1)
    let z2 = (a1[0] * weights_layer_2[0][0] + a1[1] * weights_layer_2[0][1]) / 10000 + biases_layer_2[0]
    let a2 = sigmoid(z2)
    # Scaling back the output
    let result = a2 / 10000
    # Debug outputs
    let debug_outputs = [
        IntegerEntry("debug_z1_1", z1[0]), 
        IntegerEntry("debug_a1_1", a1[0]), 
        IntegerEntry("debug_z1_2", z1[1]), 
        IntegerEntry("debug_a1_2", a1[1]), 
        IntegerEntry("debug_a2", a2), 
        IntegerEntry("debug_z2", z2), 
        IntegerEntry("debug_result", result)
    ]
    (
        debug_outputs,
        result
    )
}