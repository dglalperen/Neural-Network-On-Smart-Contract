{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# Weights and Biases
let weights_layer_1 = [[-92752, 62221],
    [-92018, -65161],
    [-15287, 114503],
    [-75248, -60448]]
let biases_layer_1 = [ -25696, 23125, -47529, 18951 ]
let weights_layer_2 = [[-75752, 55233, 65811, 37732],
    [68610, -57062, -60355, -33235]]
let biases_layer_2 = [ -31616, 29450 ]
let weights_layer_3 = [[-89396, 95173]]
let biases_layer_3 = [ -1923 ]

# Linear Forward Functions
func linear_forward_1(input: List[Int], weights: List[List[Int]], biases: List[Int]) = {
    let weighted_sum1 = (input[0] * weights[0][0] + input[1] * weights[0][1]) / 10000 + biases[0]
    let weighted_sum2 = (input[0] * weights[1][0] + input[1] * weights[1][1]) / 10000 + biases[1]
    let weighted_sum3 = (input[0] * weights[2][0] + input[1] * weights[2][1]) / 10000 + biases[2]
    let weighted_sum4 = (input[0] * weights[3][0] + input[1] * weights[3][1]) / 10000 + biases[3]
    [weighted_sum1, weighted_sum2, weighted_sum3, weighted_sum4]
}
func linear_forward_2(input: List[Int], weights: List[List[Int]], biases: List[Int]) = {
    let weighted_sum1 = (input[0] * weights[0][0] + input[1] * weights[0][1] + input[2] * weights[0][2] + input[3] * weights[0][3]) / 10000 + biases[0]
    let weighted_sum2 = (input[0] * weights[1][0] + input[1] * weights[1][1] + input[2] * weights[1][2] + input[3] * weights[1][3]) / 10000 + biases[1]
    [weighted_sum1, weighted_sum2]
}
func linear_forward_3(input: List[Int], weights: List[List[Int]], biases: List[Int]) = {
    let weighted_sum1 = (input[0] * weights[0][0] + input[1] * weights[0][1]) / 10000 + biases[0]
    [weighted_sum1]
}

# Activation Functions
# Sigmoid function
func sigmoid(input: Int) = {
    if (input < -10000) then 0
    else if (input > 10000) then 10000
    else 5000 + input / 2
}
# Sigmoid activation function for a list of values
func sigmoid_activation(inputs: List[Int], num_outputs: Int) = {
    [sigmoid(inputs[0]), sigmoid(inputs[1]), sigmoid(inputs[2]), sigmoid(inputs[3])]
}

# Predict Function
@Callable(i)
func predict(x1: Int, x2: Int) = {
    # Scale inputs
    let x1_scaled = x1 * 10000
    let x2_scaled = x2 * 10000
    let inputs = [x1_scaled, x2_scaled]
    let z1 = linear_forward_1(inputs, weights_layer_1, biases_layer_1)
    let a1 = sigmoid_activation(z1, 4)
    let z2 = linear_forward_2(a1, weights_layer_2, biases_layer_2)
    let a2 = sigmoid_activation(z2, 2)
    let z3 = linear_forward_3(a2, weights_layer_3, biases_layer_3)
    let a3 = sigmoid(z3[0])
    # Scaling back the output
    let result = a3 / 10000
    # Debug outputs
    let debug_outputs = [
        IntegerEntry("debug_z1_1", z1[0]), 
        IntegerEntry("debug_a1_1", a1[0]), 
        IntegerEntry("debug_z1_2", z1[1]), 
        IntegerEntry("debug_a1_2", a1[1]), 
        IntegerEntry("debug_z1_3", z1[2]), 
        IntegerEntry("debug_a1_3", a1[2]), 
        IntegerEntry("debug_z1_4", z1[3]), 
        IntegerEntry("debug_a1_4", a1[3]), 
        IntegerEntry("debug_z2_1", z2[0]), 
        IntegerEntry("debug_a2_1", a2[0]), 
        IntegerEntry("debug_z2_2", z2[1]), 
        IntegerEntry("debug_a2_2", a2[1]), 
        IntegerEntry("debug_z3_1", z3[0]), 
        IntegerEntry("debug_a3", a3), 
        IntegerEntry("debug_result", result)
    ]
    (
        debug_outputs,
        result
    )
}