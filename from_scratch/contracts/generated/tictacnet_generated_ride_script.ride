{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# Weights and Biases
let weights_layer_1 = [[564, 1539, -23179, 855, 294, 992, 5476, 6462, 5706],
    [1917, -323, 1527, 663, 9898, -1842, -2539, -5642, -8671],
    [-6042, -3786, 10256, -3162, 10158, -3899, 9125, -4040, -7722],
    [-1352, -922, -1104, 509, -34, 490, 5265, -12258, 9412],
    [-6464, -4986, 8360, -4702, -6679, 8185, -7182, -4902, 6565],
    [2731, 2632, -1565, 2507, 4954, 1299, -21654, 2803, 2973],
    [-6119, -3811, -2055, -3351, 14558, 532, -673, 1631, 3778],
    [6040, -838, -2110, -3854, 5085, -7445, -5852, -2461, 2966],
    [-4305, -3403, -2766, -3236, -4289, -1690, -4486, 21035, -4907],
    [-2672, -2470, -3494, -4088, -3877, -3084, 19487, -2652, -3706],
    [2412, 1642, 1964, -18620, -1462, 1182, -3050, -1253, 670],
    [19242, -2063, -4350, -3449, -5421, -4376, -4500, -3187, -4753],
    [-423, -2939, 14505, 251, -3736, -2437, -801, -2938, -3626],
    [-3949, 2718, -4336, -616, 4477, -317, -3449, 2738, -3683],
    [222, -14478, 407, -266, -8125, 2276, -770, 7233, 2045],
    [-4305, -4933, -4848, 2460, -2529, 9859, 2373, 674, 4044],
    [-5309, 10785, -5094, -3997, 10031, -4763, -5325, 10792, -5739],
    [-21947, 2385, 1861, 1808, 663, 1519, 2530, 2931, 4297],
    [-806, -3733, -6338, 1896, -14255, -3034, 5184, 5033, 260],
    [5592, 2940, 506, 5670, 741, 3691, 3501, 1949, -21185],
    [-1364, 1321, 274, -8135, -818, 998, -35, 945, -1949],
    [-129, -755, 2327, -4149, -13780, -2145, 121, -4248, 1181],
    [8429, 9219, 7419, -3778, -8656, -4177, -8727, -6674, -8870],
    [-2176, -3671, -12291, 5772, 5707, 176, 5703, -6078, -4386],
    [-1839, 2272, -1238, 4154, -12551, 4606, -6216, 21, 1667],
    [358, -5103, -3725, 10010, -2287, -1696, -2364, -2487, -766],
    [-1863, 20045, -3277, -1732, -4059, -1788, -1120, -914, -1592],
    [1803, 4262, 1396, 4433, 3261, -22890, 2005, 4044, 3658],
    [-3681, 678, 1429, 4937, -7337, 4294, 7123, 1740, -6057],
    [4997, 4766, -744, 7316, 4186, 2866, 5265, -16537, 1584],
    [-2515, -1614, -3018, -2442, -5076, -3150, -5879, -333, 17206],
    [-2745, -1716, -2322, -4940, -4712, 21290, -3686, -4457, -4159],
    [-3365, -1416, -1958, -14770, 53, -2617, 5627, 6320, 7960],
    [5355, 1147, 1384, -915, 3172, -2462, 947, -13150, 2117],
    [7412, -19148, -65, 2697, 6621, 1645, 4059, 2603, 3924],
    [-6636, -2689, -3386, 9831, 8304, 10028, -4819, -3035, -6716]]
let biases_layer_1 = [ -6632, -548, -12850, -4518, -9916, -4022, -668, -4817, -2828, -3640, -4752, -4800, 151, 7959, -5093, -564, -11437, -6961, -4759, -7890, 8094, -1435, -10481, -3502, -2916, 5716, -2811, -6803, -2598, -2480, -3309, -5554, -7707, -4774, -3217, -11177 ]
let weights_layer_2 = [[-2096, -1305, 5422, 3073, 3504, 5502, -2672, 5596, 1887, 10049, -1150, 5652, -1567, 363, -2745, 2825, 6455, 6153, -1234, -3728, 953, -3504, 4523, -1796, 3711, -266, -2127, 12373, -137, -726, -365, 12859, 232, 2427, 1257, 6005],
    [-106, -2166, -4757, 110, -2887, -1229, 431, 1116, 10520, -3279, -4476, 5340, 6974, 5935, -5474, 2669, -3732, -1383, -2237, -6304, 8181, 3944, -3330, 1628, -770, 3266, -10111, 6225, -245, 5486, -3833, 9944, -4287, 3038, -5067, -4065],
    [2510, 1181, -2623, 5033, -4689, -7522, 982, -1767, 1762, 614, 629, 9461, 892, 1024, -448, -2775, -1788, -7064, -479, 1173, -394, 5090, -4726, 4378, -468, -417, 498, 784, -2916, 678, 4935, 1103, -3363, -2438, 470, 1189],
    [-2360, 3603, -596, 747, -1269, 4471, -11635, 913, -3798, -3722, -4302, -1479, 3493, -257, 1495, 3177, 393, 559, -1514, 332, -4115, -401, 740, -8928, 6055, 3887, -1232, -7560, 3886, 3661, -6356, 2298, -5153, -153, -1423, -1253],
    [418, -74, -194, -537, 664, -712, -321, -1606, -606, 1231, 1318, -492, -1264, -1238, -1042, -678, -1643, -1346, -1354, -1211, -813, -76, -1336, -1019, 219, -1526, -689, -954, 51, -158, -427, 687, -256, -1220, -1567, 368],
    [-173, 241, 1681, -3579, -397, -2941, 5489, 3201, 4842, -4938, 1533, -3574, -1694, -4417, 1214, -103, -6495, -1498, 6381, 1009, 2520, -2869, 827, 1633, 3153, 2898, 6345, 12259, 319, 6083, -1585, 15327, 1697, 5367, 1243, -2953],
    [107, 145, -2188, 403, -911, 1298, -2149, 2150, -2290, -2026, -3789, -6824, 203, 915, 2349, 2191, -2096, 5985, -2224, 3649, -14167, -5157, -1335, -1897, 7794, 19238, -848, 10763, 3764, 3190, -5095, -8904, -5128, -1621, -1361, 1856],
    [3341, -1613, -2545, -1826, 4012, 5400, -2311, 722, -916, -830, -563, -2565, 1867, 4541, 6163, -4621, -2253, -1077, -1949, -2230, 356, 560, -1588, -390, -596, -1143, 19868, -1873, -410, 4803, -2544, 239, 977, 168, 8759, 4005],
    [-9858, 3688, 4177, 290, 520, -2893, -3909, 2431, 4223, 2125, 6224, 428, 73, 153, -2108, -5298, -99, -2885, 201, 12336, -1906, 2079, 4876, -589, 2448, -1349, -379, 7642, -1544, -3603, 2004, 2510, -1904, 2209, -1215, -117],
    [2281, -1072, 3996, -2334, 4235, -5507, -5850, -1218, 1095, -2154, -642, -2979, 9930, -3455, 1385, -4333, 863, 9045, -201, 2592, 2021, 891, -640, -7210, 4180, 377, 210, 2567, -3675, 459, -1476, 985, 2661, 1220, 562, 2375],
    [4832, -1143, -237, 1941, -4376, -5830, -387, -4099, -756, 12251, -3078, -3504, -2443, 4335, -4996, 1416, 206, 505, -4118, -159, -155, 2033, -5753, 4897, -732, -721, -853, -847, 5195, -1607, -1054, -2430, -1948, -2840, 1089, -6073],
    [17104, 2700, 2898, 1350, -2431, 1451, 150, -4051, -4498, -5733, 206, 3039, -4419, -3286, -4724, 835, 3310, 4881, 4011, 1028, -2818, -4128, -4579, 4811, -1824, 3096, 834, -6460, -561, 1406, 1344, 3584, 3963, -7074, -10575, 1183],
    [2078, 1015, 5473, -3486, -2176, -7196, -3221, 2047, 235, -2161, 7465, 17932, 1139, 16, 555, -4492, 780, 16413, 118, -3092, 1895, -611, -4913, -3975, 1483, 1696, 673, 2002, 1675, -85, -2287, 4063, 5576, 4087, 4041, -1404],
    [-5883, -5918, -837, 2697, -40, 350, -2524, 3499, 6892, 917, 2915, 518, 2635, -10878, -2696, 1323, -2544, -2772, 11436, -1107, -192, 11603, 5059, -4973, 12019, -99, 4420, -4674, 4064, -1382, 837, 3351, -5541, 614, -6637, -475],
    [-2295, 3567, 2535, 3126, 3960, 2910, -3538, -679, -2642, 4519, -3754, 14892, 476, 2866, 4168, -3821, 4623, 10654, 6543, 7306, -1025, 3456, 688, 318, -4355, 1513, 3300, -1805, -4555, -2618, 4840, 2324, 432, -3001, 4289, 6549],
    [3931, -807, -1791, 970, 6028, 6852, 285, 651, 2335, 7948, -6, 3726, 6668, -268, -4170, -1777, 4997, 1468, -1039, -424, -35, -267, 1643, -2070, -1533, 1219, -949, -411, 3380, -2783, 982, -3889, -1680, 1290, -3117, 5231],
    [-1577, -3050, -2093, 1381, -783, 3137, 6044, -1401, 381, -871, -814, -4675, -610, -1684, -382, 1224, -2221, 10105, -4910, -3667, 527, -6593, -1908, 1695, -3573, -1310, 2604, 2930, -5818, 1367, 1013, -1488, 555, -1199, -348, -236],
    [3335, -3891, -4146, 662, -5076, -5571, -1160, -1221, -2333, 2318, -6249, -2111, 1009, 2932, 2470, 2442, -3146, -6213, 4366, 1164, -574, 1966, -7984, -1998, -716, 3432, 4135, 4532, 6444, -3933, -2834, -866, -3434, -2958, 5587, -1600],
    [-838, 253, -859, -1222, 4350, -92, 607, 4011, 2234, -387, 4093, -1213, 14403, -1620, -1193, -4969, -4509, 2447, -2574, -1982, 1761, 499, -649, -6015, 942, -2154, -1608, 2990, -3994, -1568, 56, -4305, -2286, 4976, 813, 1030],
    [3066, 5948, 4074, -1060, 5667, -4937, 5734, 423, -2048, 2584, 697, 420, -825, -3885, 4486, -1865, 7827, 3486, 9713, -5074, -1460, -186, 9088, -2956, 4742, 310, -1012, 3708, -733, -1804, 1802, 223, 4528, 67, 1969, 2272],
    [4582, -2931, -1982, -5158, -1475, 444, 1703, 2309, 18746, 1479, 745, -216, -5152, -3864, -728, -4970, 1313, -3858, 5493, 4351, -1562, 49, -54, 1383, 1103, -282, -751, 4091, 1670, -6141, -1063, -4440, 377, -6219, 2215, -2458],
    [10033, -3350, -908, 3179, 3946, 4611, 107, 125, -5169, -971, 2597, -3581, 6468, -1559, 2573, -1565, 5836, -7819, 4255, 559, 2011, -2218, 3906, 1816, -1021, 3104, 3707, 2128, 3470, 265, -1217, -1012, 5130, 1898, 9447, 1013],
    [658, -1685, -1712, -790, -2307, 705, 5439, 580, 1744, -373, -2189, 1641, 18, -252, -2386, 2081, -1499, 2503, 1551, -4418, -1009, 3080, -446, -335, 2319, -1773, 2688, 3668, -2440, 1957, 3894, 1961, -1972, -623, -3800, -365],
    [-1669, 10737, 672, 964, 3822, 1905, 11737, 1648, 275, -3024, -3696, -1608, -2571, 6669, 139, -1584, -913, -2322, -6145, 702, 1485, -8048, -1778, 7825, -8300, -3090, -3025, 4640, -5757, 4231, -1531, -2860, 1907, 5703, -723, -797],
    [-2633, -5119, 8627, 2168, -890, 3944, -2776, 3651, 5205, 1529, 3780, -3753, -1904, -904, 1457, 4857, -746, -2564, -8256, -3110, 3267, -4825, 1364, 824, 1032, -2630, 14493, 2457, -1367, 1206, 3163, 5313, 1431, 4222, 6849, 6444],
    [-4291, 1097, -844, 2177, 3425, 14896, 4484, 7910, 5684, 21400, 3932, -705, 2131, -1274, 548, 1000, -2338, -2291, -3747, -6956, 73, -1122, 1148, 3160, 3379, -1019, -185, -2722, 4599, 3741, 879, -1954, -3506, 2368, 1223, 2317],
    [-2185, 223, -4644, -1412, 630, -3031, 2708, -3382, -911, 3367, 13855, 3568, -1963, -1066, 1143, -335, 687, -7617, -1032, -785, 9567, 1614, -3619, 3592, -7180, -12214, 840, -5226, -4516, -2974, -1094, 4227, 9004, -402, -2994, -2658],
    [799, -3078, 3005, 11370, -4284, 3271, 2849, 3684, -2867, -2893, 568, -4617, 471, 1593, 974, -847, 1607, 286, -1218, 16983, 3677, 284, 1897, -4501, 1976, 349, -1392, 885, -1849, -3860, 19921, 3745, 2275, -1508, -2128, -606],
    [-185, 3390, 277, -695, 3227, 2887, 4299, -2136, -2134, -1883, 6438, -2668, -4444, 5344, 1075, 1191, 2022, 815, -4963, -4414, 7824, -5766, -1414, 103, -5981, -1158, 556, -3631, -2253, -4335, -4069, 1289, 5596, -94, 34, -3464],
    [1685, -4007, -1332, -856, -3036, -4039, -2013, -1274, -1556, 4618, -4698, 5203, -107, -4809, -1377, -2733, -2406, -6411, 3977, 4240, -5948, 1050, -1793, 2509, -1882, 3806, -357, 4023, 2805, 4061, -1415, -309, -4757, -254, 2470, 488],
    [-7290, -3075, -2002, 503, -5791, -3621, 630, -2569, 4729, -3445, -1732, 3170, -816, 5571, -1525, 1089, -10117, 497, -195, -3385, 7700, 4913, -10956, -243, -37, 3590, 8360, -7880, -4761, -1089, 2892, -8772, -3768, 810, 213, -7224],
    [-8266, 1528, -936, 2328, 8643, 830, 4138, -3567, 2847, -1492, 3043, -91, -3211, -3528, 5105, -910, -5218, 8871, -2732, -5464, 1250, 1456, 917, 525, 4296, 995, 1819, -6723, -2903, 2621, 683, 481, 615, 965, 2595, -1880],
    [2655, -2790, 12413, 7609, 2861, -217, 3780, 322, 15931, -932, 5160, 1737, 3562, -2485, -6777, -997, 5342, -626, -1949, 4562, -2205, -3122, 2830, -1207, -2284, 5697, 870, -4454, 4004, 14396, 5935, 228, 825, 7482, 3312, 8595],
    [-2393, 5001, -637, -3215, -1747, 2528, -2626, -1978, -1652, -1195, -2664, -211, -5308, -526, 1315, 1522, -1125, -3577, -966, 3713, 228, -317, -1283, -2120, 4743, 1380, 192, 2520, 404, -4582, -410, 7377, -774, -3070, -717, -1071],
    [1777, -1480, 1443, -1212, 1609, -1079, -427, 179, -1312, -463, 296, 1210, -1256, -1443, -1357, -972, -19, 1103, -1031, -1670, 2018, 793, -869, -1243, 1891, -1822, 3238, -1969, -381, -1679, -309, 1502, -534, -1169, -1331, -1924],
    [-5742, 2942, -166, -4927, 2651, 7606, -2251, 1903, -1186, -3071, 2323, -7556, 13648, -1901, 2113, -4962, -1996, 7644, 4242, 1634, 2084, 2424, -1206, -7340, -1060, -3872, 578, 2666, 1271, -985, -2562, 2440, 1036, 1219, 3700, 4020]]
let biases_layer_2 = [ -1768, 8209, 1935, 6068, 1144, 945, 2821, 287, -1979, 456, 7230, -4163, 1676, -2168, -3095, -1961, -1625, 8204, -26, -7049, -1025, -6862, -1472, -7671, 1261, -3408, -7758, 2778, -2872, -5227, 21209, 343, -7070, -12, 336, -2278 ]
let weights_layer_3 = [[-9317, 2910, 620, -228, 1610, 5421, 2761, 754, 2811, -2270, 4988, -6310, -21426, 2005, -16974, -4720, -4436, 7522, -111, -6940, -571, 1793, 150, -333, 4354, 2925, 2484, 4565, 4936, 388, 4070, -8381, -2501, 2472, -409, 6175],
    [1091, 14985, 5994, 7419, -1692, -7007, 1985, -17003, 3320, -5234, 2948, 3433, -2081, 4357, -5485, -37, 3740, -7076, 914, -4549, 487, -6295, 3202, -1999, -12831, 4826, 2047, 2865, 3341, -8123, 1152, -4427, -2360, 845, -3851, -1567],
    [3170, -3001, 16, 4114, 1448, 2750, 3644, -3529, 7086, -14054, 2580, -21113, -1151, 704, 1254, -6595, 2279, -2830, -18095, -2609, 1310, -10586, 457, -856, 4277, 2065, 1340, -2091, -2006, -7650, 9399, 9203, -5005, 6350, 1069, -16685],
    [31, 4815, 12845, -5516, 1626, 3480, -29237, 824, -584, -5454, 1714, 546, -5355, -1901, 3747, -1101, 8750, 6956, 1419, -6528, 846, -7768, 8701, -1002, 73, 168, -29198, -1835, 107, 4095, 4639, -3291, -5653, 4476, -728, 9307],
    [5863, 4945, 1281, 4748, 408, -6666, 1562, 468, -1625, 205, 3391, -915, 3150, -31536, -4780, -1298, -3063, 2241, 1305, -14830, 314, -3245, -3722, -28292, 8745, -828, 1695, 2445, -12087, -5147, 7734, -7306, 582, 2032, -553, -710],
    [-14743, -6340, 5274, 5173, 314, -14713, 5069, 1868, -2584, -2057, 4332, 3800, -4649, 2024, 2323, 3965, 5948, -3578, 4193, -4258, 6240, -3034, -882, 3563, -5152, 2657, 8463, -4486, -11621, -7521, 14395, 6833, -1, -3908, -424, 1679],
    [-9986, 2993, 2819, 5901, -498, 7336, 407, -1869, -764, 3495, -11816, 5097, 6429, -1581, -6180, -10516, 5264, 7540, 961, -475, -741, -6460, 800, 3218, -2338, -21638, -3159, 1523, 3848, -970, 7511, -532, 1004, -878, 1619, 1557],
    [69, -2163, 827, 8828, -385, -2432, 2613, 704, -907, -3341, 8018, 2854, -458, -2626, 4308, -1242, 3521, 8610, -3073, 964, -21911, 2565, 2032, 2134, -5156, -4150, 5429, 4212, 791, -6657, 4684, -6473, -19282, 8318, 3605, 4658],
    [536, 7804, -2112, 7804, -1536, 3409, -308, 6206, -16063, -2231, 4157, -1351, 5013, -931, -8226, 599, -8239, 898, -2716, -1701, 4741, -3679, 219, 3529, -3815, 2257, 5035, -22650, -2400, -7163, 3112, 1954, -8977, 966, -1432, 5029]]
let biases_layer_3 = [ 11212, 2074, 7455, -585, 8587, 2132, 6372, 4342, 6426 ]

# Linear Forward Functions
func linear_forward_1(input: List[Int], weights: List[List[Int]], biases: List[Int]) = {
    let weighted_sum1 = (input[0] * weights[0][0] + input[1] * weights[0][1] + input[2] * weights[0][2] + input[3] * weights[0][3] + input[4] * weights[0][4] + input[5] * weights[0][5] + input[6] * weights[0][6] + input[7] * weights[0][7] + input[8] * weights[0][8]) / 10000 + biases[0]
    let weighted_sum2 = (input[0] * weights[1][0] + input[1] * weights[1][1] + input[2] * weights[1][2] + input[3] * weights[1][3] + input[4] * weights[1][4] + input[5] * weights[1][5] + input[6] * weights[1][6] + input[7] * weights[1][7] + input[8] * weights[1][8]) / 10000 + biases[1]
    let weighted_sum3 = (input[0] * weights[2][0] + input[1] * weights[2][1] + input[2] * weights[2][2] + input[3] * weights[2][3] + input[4] * weights[2][4] + input[5] * weights[2][5] + input[6] * weights[2][6] + input[7] * weights[2][7] + input[8] * weights[2][8]) / 10000 + biases[2]
    let weighted_sum4 = (input[0] * weights[3][0] + input[1] * weights[3][1] + input[2] * weights[3][2] + input[3] * weights[3][3] + input[4] * weights[3][4] + input[5] * weights[3][5] + input[6] * weights[3][6] + input[7] * weights[3][7] + input[8] * weights[3][8]) / 10000 + biases[3]
    let weighted_sum5 = (input[0] * weights[4][0] + input[1] * weights[4][1] + input[2] * weights[4][2] + input[3] * weights[4][3] + input[4] * weights[4][4] + input[5] * weights[4][5] + input[6] * weights[4][6] + input[7] * weights[4][7] + input[8] * weights[4][8]) / 10000 + biases[4]
    let weighted_sum6 = (input[0] * weights[5][0] + input[1] * weights[5][1] + input[2] * weights[5][2] + input[3] * weights[5][3] + input[4] * weights[5][4] + input[5] * weights[5][5] + input[6] * weights[5][6] + input[7] * weights[5][7] + input[8] * weights[5][8]) / 10000 + biases[5]
    let weighted_sum7 = (input[0] * weights[6][0] + input[1] * weights[6][1] + input[2] * weights[6][2] + input[3] * weights[6][3] + input[4] * weights[6][4] + input[5] * weights[6][5] + input[6] * weights[6][6] + input[7] * weights[6][7] + input[8] * weights[6][8]) / 10000 + biases[6]
    let weighted_sum8 = (input[0] * weights[7][0] + input[1] * weights[7][1] + input[2] * weights[7][2] + input[3] * weights[7][3] + input[4] * weights[7][4] + input[5] * weights[7][5] + input[6] * weights[7][6] + input[7] * weights[7][7] + input[8] * weights[7][8]) / 10000 + biases[7]
    let weighted_sum9 = (input[0] * weights[8][0] + input[1] * weights[8][1] + input[2] * weights[8][2] + input[3] * weights[8][3] + input[4] * weights[8][4] + input[5] * weights[8][5] + input[6] * weights[8][6] + input[7] * weights[8][7] + input[8] * weights[8][8]) / 10000 + biases[8]
    let weighted_sum10 = (input[0] * weights[9][0] + input[1] * weights[9][1] + input[2] * weights[9][2] + input[3] * weights[9][3] + input[4] * weights[9][4] + input[5] * weights[9][5] + input[6] * weights[9][6] + input[7] * weights[9][7] + input[8] * weights[9][8]) / 10000 + biases[9]
    let weighted_sum11 = (input[0] * weights[10][0] + input[1] * weights[10][1] + input[2] * weights[10][2] + input[3] * weights[10][3] + input[4] * weights[10][4] + input[5] * weights[10][5] + input[6] * weights[10][6] + input[7] * weights[10][7] + input[8] * weights[10][8]) / 10000 + biases[10]
    let weighted_sum12 = (input[0] * weights[11][0] + input[1] * weights[11][1] + input[2] * weights[11][2] + input[3] * weights[11][3] + input[4] * weights[11][4] + input[5] * weights[11][5] + input[6] * weights[11][6] + input[7] * weights[11][7] + input[8] * weights[11][8]) / 10000 + biases[11]
    let weighted_sum13 = (input[0] * weights[12][0] + input[1] * weights[12][1] + input[2] * weights[12][2] + input[3] * weights[12][3] + input[4] * weights[12][4] + input[5] * weights[12][5] + input[6] * weights[12][6] + input[7] * weights[12][7] + input[8] * weights[12][8]) / 10000 + biases[12]
    let weighted_sum14 = (input[0] * weights[13][0] + input[1] * weights[13][1] + input[2] * weights[13][2] + input[3] * weights[13][3] + input[4] * weights[13][4] + input[5] * weights[13][5] + input[6] * weights[13][6] + input[7] * weights[13][7] + input[8] * weights[13][8]) / 10000 + biases[13]
    let weighted_sum15 = (input[0] * weights[14][0] + input[1] * weights[14][1] + input[2] * weights[14][2] + input[3] * weights[14][3] + input[4] * weights[14][4] + input[5] * weights[14][5] + input[6] * weights[14][6] + input[7] * weights[14][7] + input[8] * weights[14][8]) / 10000 + biases[14]
    let weighted_sum16 = (input[0] * weights[15][0] + input[1] * weights[15][1] + input[2] * weights[15][2] + input[3] * weights[15][3] + input[4] * weights[15][4] + input[5] * weights[15][5] + input[6] * weights[15][6] + input[7] * weights[15][7] + input[8] * weights[15][8]) / 10000 + biases[15]
    let weighted_sum17 = (input[0] * weights[16][0] + input[1] * weights[16][1] + input[2] * weights[16][2] + input[3] * weights[16][3] + input[4] * weights[16][4] + input[5] * weights[16][5] + input[6] * weights[16][6] + input[7] * weights[16][7] + input[8] * weights[16][8]) / 10000 + biases[16]
    let weighted_sum18 = (input[0] * weights[17][0] + input[1] * weights[17][1] + input[2] * weights[17][2] + input[3] * weights[17][3] + input[4] * weights[17][4] + input[5] * weights[17][5] + input[6] * weights[17][6] + input[7] * weights[17][7] + input[8] * weights[17][8]) / 10000 + biases[17]
    let weighted_sum19 = (input[0] * weights[18][0] + input[1] * weights[18][1] + input[2] * weights[18][2] + input[3] * weights[18][3] + input[4] * weights[18][4] + input[5] * weights[18][5] + input[6] * weights[18][6] + input[7] * weights[18][7] + input[8] * weights[18][8]) / 10000 + biases[18]
    let weighted_sum20 = (input[0] * weights[19][0] + input[1] * weights[19][1] + input[2] * weights[19][2] + input[3] * weights[19][3] + input[4] * weights[19][4] + input[5] * weights[19][5] + input[6] * weights[19][6] + input[7] * weights[19][7] + input[8] * weights[19][8]) / 10000 + biases[19]
    let weighted_sum21 = (input[0] * weights[20][0] + input[1] * weights[20][1] + input[2] * weights[20][2] + input[3] * weights[20][3] + input[4] * weights[20][4] + input[5] * weights[20][5] + input[6] * weights[20][6] + input[7] * weights[20][7] + input[8] * weights[20][8]) / 10000 + biases[20]
    let weighted_sum22 = (input[0] * weights[21][0] + input[1] * weights[21][1] + input[2] * weights[21][2] + input[3] * weights[21][3] + input[4] * weights[21][4] + input[5] * weights[21][5] + input[6] * weights[21][6] + input[7] * weights[21][7] + input[8] * weights[21][8]) / 10000 + biases[21]
    let weighted_sum23 = (input[0] * weights[22][0] + input[1] * weights[22][1] + input[2] * weights[22][2] + input[3] * weights[22][3] + input[4] * weights[22][4] + input[5] * weights[22][5] + input[6] * weights[22][6] + input[7] * weights[22][7] + input[8] * weights[22][8]) / 10000 + biases[22]
    let weighted_sum24 = (input[0] * weights[23][0] + input[1] * weights[23][1] + input[2] * weights[23][2] + input[3] * weights[23][3] + input[4] * weights[23][4] + input[5] * weights[23][5] + input[6] * weights[23][6] + input[7] * weights[23][7] + input[8] * weights[23][8]) / 10000 + biases[23]
    let weighted_sum25 = (input[0] * weights[24][0] + input[1] * weights[24][1] + input[2] * weights[24][2] + input[3] * weights[24][3] + input[4] * weights[24][4] + input[5] * weights[24][5] + input[6] * weights[24][6] + input[7] * weights[24][7] + input[8] * weights[24][8]) / 10000 + biases[24]
    let weighted_sum26 = (input[0] * weights[25][0] + input[1] * weights[25][1] + input[2] * weights[25][2] + input[3] * weights[25][3] + input[4] * weights[25][4] + input[5] * weights[25][5] + input[6] * weights[25][6] + input[7] * weights[25][7] + input[8] * weights[25][8]) / 10000 + biases[25]
    let weighted_sum27 = (input[0] * weights[26][0] + input[1] * weights[26][1] + input[2] * weights[26][2] + input[3] * weights[26][3] + input[4] * weights[26][4] + input[5] * weights[26][5] + input[6] * weights[26][6] + input[7] * weights[26][7] + input[8] * weights[26][8]) / 10000 + biases[26]
    let weighted_sum28 = (input[0] * weights[27][0] + input[1] * weights[27][1] + input[2] * weights[27][2] + input[3] * weights[27][3] + input[4] * weights[27][4] + input[5] * weights[27][5] + input[6] * weights[27][6] + input[7] * weights[27][7] + input[8] * weights[27][8]) / 10000 + biases[27]
    let weighted_sum29 = (input[0] * weights[28][0] + input[1] * weights[28][1] + input[2] * weights[28][2] + input[3] * weights[28][3] + input[4] * weights[28][4] + input[5] * weights[28][5] + input[6] * weights[28][6] + input[7] * weights[28][7] + input[8] * weights[28][8]) / 10000 + biases[28]
    let weighted_sum30 = (input[0] * weights[29][0] + input[1] * weights[29][1] + input[2] * weights[29][2] + input[3] * weights[29][3] + input[4] * weights[29][4] + input[5] * weights[29][5] + input[6] * weights[29][6] + input[7] * weights[29][7] + input[8] * weights[29][8]) / 10000 + biases[29]
    let weighted_sum31 = (input[0] * weights[30][0] + input[1] * weights[30][1] + input[2] * weights[30][2] + input[3] * weights[30][3] + input[4] * weights[30][4] + input[5] * weights[30][5] + input[6] * weights[30][6] + input[7] * weights[30][7] + input[8] * weights[30][8]) / 10000 + biases[30]
    let weighted_sum32 = (input[0] * weights[31][0] + input[1] * weights[31][1] + input[2] * weights[31][2] + input[3] * weights[31][3] + input[4] * weights[31][4] + input[5] * weights[31][5] + input[6] * weights[31][6] + input[7] * weights[31][7] + input[8] * weights[31][8]) / 10000 + biases[31]
    let weighted_sum33 = (input[0] * weights[32][0] + input[1] * weights[32][1] + input[2] * weights[32][2] + input[3] * weights[32][3] + input[4] * weights[32][4] + input[5] * weights[32][5] + input[6] * weights[32][6] + input[7] * weights[32][7] + input[8] * weights[32][8]) / 10000 + biases[32]
    let weighted_sum34 = (input[0] * weights[33][0] + input[1] * weights[33][1] + input[2] * weights[33][2] + input[3] * weights[33][3] + input[4] * weights[33][4] + input[5] * weights[33][5] + input[6] * weights[33][6] + input[7] * weights[33][7] + input[8] * weights[33][8]) / 10000 + biases[33]
    let weighted_sum35 = (input[0] * weights[34][0] + input[1] * weights[34][1] + input[2] * weights[34][2] + input[3] * weights[34][3] + input[4] * weights[34][4] + input[5] * weights[34][5] + input[6] * weights[34][6] + input[7] * weights[34][7] + input[8] * weights[34][8]) / 10000 + biases[34]
    let weighted_sum36 = (input[0] * weights[35][0] + input[1] * weights[35][1] + input[2] * weights[35][2] + input[3] * weights[35][3] + input[4] * weights[35][4] + input[5] * weights[35][5] + input[6] * weights[35][6] + input[7] * weights[35][7] + input[8] * weights[35][8]) / 10000 + biases[35]
    [weighted_sum1, weighted_sum2, weighted_sum3, weighted_sum4, weighted_sum5, weighted_sum6, weighted_sum7, weighted_sum8, weighted_sum9, weighted_sum10, weighted_sum11, weighted_sum12, weighted_sum13, weighted_sum14, weighted_sum15, weighted_sum16, weighted_sum17, weighted_sum18, weighted_sum19, weighted_sum20, weighted_sum21, weighted_sum22, weighted_sum23, weighted_sum24, weighted_sum25, weighted_sum26, weighted_sum27, weighted_sum28, weighted_sum29, weighted_sum30, weighted_sum31, weighted_sum32, weighted_sum33, weighted_sum34, weighted_sum35, weighted_sum36]
}

func linear_forward_2(input: List[Int], weights: List[List[Int]], biases: List[Int]) = {
    let weighted_sum1 = (input[0] * weights[0][0] + input[1] * weights[0][1] + input[2] * weights[0][2] + input[3] * weights[0][3] + input[4] * weights[0][4] + input[5] * weights[0][5] + input[6] * weights[0][6] + input[7] * weights[0][7] + input[8] * weights[0][8] + input[9] * weights[0][9] + input[10] * weights[0][10] + input[11] * weights[0][11] + input[12] * weights[0][12] + input[13] * weights[0][13] + input[14] * weights[0][14] + input[15] * weights[0][15] + input[16] * weights[0][16] + input[17] * weights[0][17] + input[18] * weights[0][18] + input[19] * weights[0][19] + input[20] * weights[0][20] + input[21] * weights[0][21] + input[22] * weights[0][22] + input[23] * weights[0][23] + input[24] * weights[0][24] + input[25] * weights[0][25] + input[26] * weights[0][26] + input[27] * weights[0][27] + input[28] * weights[0][28] + input[29] * weights[0][29] + input[30] * weights[0][30] + input[31] * weights[0][31] + input[32] * weights[0][32] + input[33] * weights[0][33] + input[34] * weights[0][34] + input[35] * weights[0][35]) / 10000 + biases[0]
    let weighted_sum2 = (input[0] * weights[1][0] + input[1] * weights[1][1] + input[2] * weights[1][2] + input[3] * weights[1][3] + input[4] * weights[1][4] + input[5] * weights[1][5] + input[6] * weights[1][6] + input[7] * weights[1][7] + input[8] * weights[1][8] + input[9] * weights[1][9] + input[10] * weights[1][10] + input[11] * weights[1][11] + input[12] * weights[1][12] + input[13] * weights[1][13] + input[14] * weights[1][14] + input[15] * weights[1][15] + input[16] * weights[1][16] + input[17] * weights[1][17] + input[18] * weights[1][18] + input[19] * weights[1][19] + input[20] * weights[1][20] + input[21] * weights[1][21] + input[22] * weights[1][22] + input[23] * weights[1][23] + input[24] * weights[1][24] + input[25] * weights[1][25] + input[26] * weights[1][26] + input[27] * weights[1][27] + input[28] * weights[1][28] + input[29] * weights[1][29] + input[30] * weights[1][30] + input[31] * weights[1][31] + input[32] * weights[1][32] + input[33] * weights[1][33] + input[34] * weights[1][34] + input[35] * weights[1][35]) / 10000 + biases[1]
    let weighted_sum3 = (input[0] * weights[2][0] + input[1] * weights[2][1] + input[2] * weights[2][2] + input[3] * weights[2][3] + input[4] * weights[2][4] + input[5] * weights[2][5] + input[6] * weights[2][6] + input[7] * weights[2][7] + input[8] * weights[2][8] + input[9] * weights[2][9] + input[10] * weights[2][10] + input[11] * weights[2][11] + input[12] * weights[2][12] + input[13] * weights[2][13] + input[14] * weights[2][14] + input[15] * weights[2][15] + input[16] * weights[2][16] + input[17] * weights[2][17] + input[18] * weights[2][18] + input[19] * weights[2][19] + input[20] * weights[2][20] + input[21] * weights[2][21] + input[22] * weights[2][22] + input[23] * weights[2][23] + input[24] * weights[2][24] + input[25] * weights[2][25] + input[26] * weights[2][26] + input[27] * weights[2][27] + input[28] * weights[2][28] + input[29] * weights[2][29] + input[30] * weights[2][30] + input[31] * weights[2][31] + input[32] * weights[2][32] + input[33] * weights[2][33] + input[34] * weights[2][34] + input[35] * weights[2][35]) / 10000 + biases[2]
    let weighted_sum4 = (input[0] * weights[3][0] + input[1] * weights[3][1] + input[2] * weights[3][2] + input[3] * weights[3][3] + input[4] * weights[3][4] + input[5] * weights[3][5] + input[6] * weights[3][6] + input[7] * weights[3][7] + input[8] * weights[3][8] + input[9] * weights[3][9] + input[10] * weights[3][10] + input[11] * weights[3][11] + input[12] * weights[3][12] + input[13] * weights[3][13] + input[14] * weights[3][14] + input[15] * weights[3][15] + input[16] * weights[3][16] + input[17] * weights[3][17] + input[18] * weights[3][18] + input[19] * weights[3][19] + input[20] * weights[3][20] + input[21] * weights[3][21] + input[22] * weights[3][22] + input[23] * weights[3][23] + input[24] * weights[3][24] + input[25] * weights[3][25] + input[26] * weights[3][26] + input[27] * weights[3][27] + input[28] * weights[3][28] + input[29] * weights[3][29] + input[30] * weights[3][30] + input[31] * weights[3][31] + input[32] * weights[3][32] + input[33] * weights[3][33] + input[34] * weights[3][34] + input[35] * weights[3][35]) / 10000 + biases[3]
    let weighted_sum5 = (input[0] * weights[4][0] + input[1] * weights[4][1] + input[2] * weights[4][2] + input[3] * weights[4][3] + input[4] * weights[4][4] + input[5] * weights[4][5] + input[6] * weights[4][6] + input[7] * weights[4][7] + input[8] * weights[4][8] + input[9] * weights[4][9] + input[10] * weights[4][10] + input[11] * weights[4][11] + input[12] * weights[4][12] + input[13] * weights[4][13] + input[14] * weights[4][14] + input[15] * weights[4][15] + input[16] * weights[4][16] + input[17] * weights[4][17] + input[18] * weights[4][18] + input[19] * weights[4][19] + input[20] * weights[4][20] + input[21] * weights[4][21] + input[22] * weights[4][22] + input[23] * weights[4][23] + input[24] * weights[4][24] + input[25] * weights[4][25] + input[26] * weights[4][26] + input[27] * weights[4][27] + input[28] * weights[4][28] + input[29] * weights[4][29] + input[30] * weights[4][30] + input[31] * weights[4][31] + input[32] * weights[4][32] + input[33] * weights[4][33] + input[34] * weights[4][34] + input[35] * weights[4][35]) / 10000 + biases[4]
    let weighted_sum6 = (input[0] * weights[5][0] + input[1] * weights[5][1] + input[2] * weights[5][2] + input[3] * weights[5][3] + input[4] * weights[5][4] + input[5] * weights[5][5] + input[6] * weights[5][6] + input[7] * weights[5][7] + input[8] * weights[5][8] + input[9] * weights[5][9] + input[10] * weights[5][10] + input[11] * weights[5][11] + input[12] * weights[5][12] + input[13] * weights[5][13] + input[14] * weights[5][14] + input[15] * weights[5][15] + input[16] * weights[5][16] + input[17] * weights[5][17] + input[18] * weights[5][18] + input[19] * weights[5][19] + input[20] * weights[5][20] + input[21] * weights[5][21] + input[22] * weights[5][22] + input[23] * weights[5][23] + input[24] * weights[5][24] + input[25] * weights[5][25] + input[26] * weights[5][26] + input[27] * weights[5][27] + input[28] * weights[5][28] + input[29] * weights[5][29] + input[30] * weights[5][30] + input[31] * weights[5][31] + input[32] * weights[5][32] + input[33] * weights[5][33] + input[34] * weights[5][34] + input[35] * weights[5][35]) / 10000 + biases[5]
    let weighted_sum7 = (input[0] * weights[6][0] + input[1] * weights[6][1] + input[2] * weights[6][2] + input[3] * weights[6][3] + input[4] * weights[6][4] + input[5] * weights[6][5] + input[6] * weights[6][6] + input[7] * weights[6][7] + input[8] * weights[6][8] + input[9] * weights[6][9] + input[10] * weights[6][10] + input[11] * weights[6][11] + input[12] * weights[6][12] + input[13] * weights[6][13] + input[14] * weights[6][14] + input[15] * weights[6][15] + input[16] * weights[6][16] + input[17] * weights[6][17] + input[18] * weights[6][18] + input[19] * weights[6][19] + input[20] * weights[6][20] + input[21] * weights[6][21] + input[22] * weights[6][22] + input[23] * weights[6][23] + input[24] * weights[6][24] + input[25] * weights[6][25] + input[26] * weights[6][26] + input[27] * weights[6][27] + input[28] * weights[6][28] + input[29] * weights[6][29] + input[30] * weights[6][30] + input[31] * weights[6][31] + input[32] * weights[6][32] + input[33] * weights[6][33] + input[34] * weights[6][34] + input[35] * weights[6][35]) / 10000 + biases[6]
    let weighted_sum8 = (input[0] * weights[7][0] + input[1] * weights[7][1] + input[2] * weights[7][2] + input[3] * weights[7][3] + input[4] * weights[7][4] + input[5] * weights[7][5] + input[6] * weights[7][6] + input[7] * weights[7][7] + input[8] * weights[7][8] + input[9] * weights[7][9] + input[10] * weights[7][10] + input[11] * weights[7][11] + input[12] * weights[7][12] + input[13] * weights[7][13] + input[14] * weights[7][14] + input[15] * weights[7][15] + input[16] * weights[7][16] + input[17] * weights[7][17] + input[18] * weights[7][18] + input[19] * weights[7][19] + input[20] * weights[7][20] + input[21] * weights[7][21] + input[22] * weights[7][22] + input[23] * weights[7][23] + input[24] * weights[7][24] + input[25] * weights[7][25] + input[26] * weights[7][26] + input[27] * weights[7][27] + input[28] * weights[7][28] + input[29] * weights[7][29] + input[30] * weights[7][30] + input[31] * weights[7][31] + input[32] * weights[7][32] + input[33] * weights[7][33] + input[34] * weights[7][34] + input[35] * weights[7][35]) / 10000 + biases[7]
    let weighted_sum9 = (input[0] * weights[8][0] + input[1] * weights[8][1] + input[2] * weights[8][2] + input[3] * weights[8][3] + input[4] * weights[8][4] + input[5] * weights[8][5] + input[6] * weights[8][6] + input[7] * weights[8][7] + input[8] * weights[8][8] + input[9] * weights[8][9] + input[10] * weights[8][10] + input[11] * weights[8][11] + input[12] * weights[8][12] + input[13] * weights[8][13] + input[14] * weights[8][14] + input[15] * weights[8][15] + input[16] * weights[8][16] + input[17] * weights[8][17] + input[18] * weights[8][18] + input[19] * weights[8][19] + input[20] * weights[8][20] + input[21] * weights[8][21] + input[22] * weights[8][22] + input[23] * weights[8][23] + input[24] * weights[8][24] + input[25] * weights[8][25] + input[26] * weights[8][26] + input[27] * weights[8][27] + input[28] * weights[8][28] + input[29] * weights[8][29] + input[30] * weights[8][30] + input[31] * weights[8][31] + input[32] * weights[8][32] + input[33] * weights[8][33] + input[34] * weights[8][34] + input[35] * weights[8][35]) / 10000 + biases[8]
    let weighted_sum10 = (input[0] * weights[9][0] + input[1] * weights[9][1] + input[2] * weights[9][2] + input[3] * weights[9][3] + input[4] * weights[9][4] + input[5] * weights[9][5] + input[6] * weights[9][6] + input[7] * weights[9][7] + input[8] * weights[9][8] + input[9] * weights[9][9] + input[10] * weights[9][10] + input[11] * weights[9][11] + input[12] * weights[9][12] + input[13] * weights[9][13] + input[14] * weights[9][14] + input[15] * weights[9][15] + input[16] * weights[9][16] + input[17] * weights[9][17] + input[18] * weights[9][18] + input[19] * weights[9][19] + input[20] * weights[9][20] + input[21] * weights[9][21] + input[22] * weights[9][22] + input[23] * weights[9][23] + input[24] * weights[9][24] + input[25] * weights[9][25] + input[26] * weights[9][26] + input[27] * weights[9][27] + input[28] * weights[9][28] + input[29] * weights[9][29] + input[30] * weights[9][30] + input[31] * weights[9][31] + input[32] * weights[9][32] + input[33] * weights[9][33] + input[34] * weights[9][34] + input[35] * weights[9][35]) / 10000 + biases[9]
    let weighted_sum11 = (input[0] * weights[10][0] + input[1] * weights[10][1] + input[2] * weights[10][2] + input[3] * weights[10][3] + input[4] * weights[10][4] + input[5] * weights[10][5] + input[6] * weights[10][6] + input[7] * weights[10][7] + input[8] * weights[10][8] + input[9] * weights[10][9] + input[10] * weights[10][10] + input[11] * weights[10][11] + input[12] * weights[10][12] + input[13] * weights[10][13] + input[14] * weights[10][14] + input[15] * weights[10][15] + input[16] * weights[10][16] + input[17] * weights[10][17] + input[18] * weights[10][18] + input[19] * weights[10][19] + input[20] * weights[10][20] + input[21] * weights[10][21] + input[22] * weights[10][22] + input[23] * weights[10][23] + input[24] * weights[10][24] + input[25] * weights[10][25] + input[26] * weights[10][26] + input[27] * weights[10][27] + input[28] * weights[10][28] + input[29] * weights[10][29] + input[30] * weights[10][30] + input[31] * weights[10][31] + input[32] * weights[10][32] + input[33] * weights[10][33] + input[34] * weights[10][34] + input[35] * weights[10][35]) / 10000 + biases[10]
    let weighted_sum12 = (input[0] * weights[11][0] + input[1] * weights[11][1] + input[2] * weights[11][2] + input[3] * weights[11][3] + input[4] * weights[11][4] + input[5] * weights[11][5] + input[6] * weights[11][6] + input[7] * weights[11][7] + input[8] * weights[11][8] + input[9] * weights[11][9] + input[10] * weights[11][10] + input[11] * weights[11][11] + input[12] * weights[11][12] + input[13] * weights[11][13] + input[14] * weights[11][14] + input[15] * weights[11][15] + input[16] * weights[11][16] + input[17] * weights[11][17] + input[18] * weights[11][18] + input[19] * weights[11][19] + input[20] * weights[11][20] + input[21] * weights[11][21] + input[22] * weights[11][22] + input[23] * weights[11][23] + input[24] * weights[11][24] + input[25] * weights[11][25] + input[26] * weights[11][26] + input[27] * weights[11][27] + input[28] * weights[11][28] + input[29] * weights[11][29] + input[30] * weights[11][30] + input[31] * weights[11][31] + input[32] * weights[11][32] + input[33] * weights[11][33] + input[34] * weights[11][34] + input[35] * weights[11][35]) / 10000 + biases[11]
    let weighted_sum13 = (input[0] * weights[12][0] + input[1] * weights[12][1] + input[2] * weights[12][2] + input[3] * weights[12][3] + input[4] * weights[12][4] + input[5] * weights[12][5] + input[6] * weights[12][6] + input[7] * weights[12][7] + input[8] * weights[12][8] + input[9] * weights[12][9] + input[10] * weights[12][10] + input[11] * weights[12][11] + input[12] * weights[12][12] + input[13] * weights[12][13] + input[14] * weights[12][14] + input[15] * weights[12][15] + input[16] * weights[12][16] + input[17] * weights[12][17] + input[18] * weights[12][18] + input[19] * weights[12][19] + input[20] * weights[12][20] + input[21] * weights[12][21] + input[22] * weights[12][22] + input[23] * weights[12][23] + input[24] * weights[12][24] + input[25] * weights[12][25] + input[26] * weights[12][26] + input[27] * weights[12][27] + input[28] * weights[12][28] + input[29] * weights[12][29] + input[30] * weights[12][30] + input[31] * weights[12][31] + input[32] * weights[12][32] + input[33] * weights[12][33] + input[34] * weights[12][34] + input[35] * weights[12][35]) / 10000 + biases[12]
    let weighted_sum14 = (input[0] * weights[13][0] + input[1] * weights[13][1] + input[2] * weights[13][2] + input[3] * weights[13][3] + input[4] * weights[13][4] + input[5] * weights[13][5] + input[6] * weights[13][6] + input[7] * weights[13][7] + input[8] * weights[13][8] + input[9] * weights[13][9] + input[10] * weights[13][10] + input[11] * weights[13][11] + input[12] * weights[13][12] + input[13] * weights[13][13] + input[14] * weights[13][14] + input[15] * weights[13][15] + input[16] * weights[13][16] + input[17] * weights[13][17] + input[18] * weights[13][18] + input[19] * weights[13][19] + input[20] * weights[13][20] + input[21] * weights[13][21] + input[22] * weights[13][22] + input[23] * weights[13][23] + input[24] * weights[13][24] + input[25] * weights[13][25] + input[26] * weights[13][26] + input[27] * weights[13][27] + input[28] * weights[13][28] + input[29] * weights[13][29] + input[30] * weights[13][30] + input[31] * weights[13][31] + input[32] * weights[13][32] + input[33] * weights[13][33] + input[34] * weights[13][34] + input[35] * weights[13][35]) / 10000 + biases[13]
    let weighted_sum15 = (input[0] * weights[14][0] + input[1] * weights[14][1] + input[2] * weights[14][2] + input[3] * weights[14][3] + input[4] * weights[14][4] + input[5] * weights[14][5] + input[6] * weights[14][6] + input[7] * weights[14][7] + input[8] * weights[14][8] + input[9] * weights[14][9] + input[10] * weights[14][10] + input[11] * weights[14][11] + input[12] * weights[14][12] + input[13] * weights[14][13] + input[14] * weights[14][14] + input[15] * weights[14][15] + input[16] * weights[14][16] + input[17] * weights[14][17] + input[18] * weights[14][18] + input[19] * weights[14][19] + input[20] * weights[14][20] + input[21] * weights[14][21] + input[22] * weights[14][22] + input[23] * weights[14][23] + input[24] * weights[14][24] + input[25] * weights[14][25] + input[26] * weights[14][26] + input[27] * weights[14][27] + input[28] * weights[14][28] + input[29] * weights[14][29] + input[30] * weights[14][30] + input[31] * weights[14][31] + input[32] * weights[14][32] + input[33] * weights[14][33] + input[34] * weights[14][34] + input[35] * weights[14][35]) / 10000 + biases[14]
    let weighted_sum16 = (input[0] * weights[15][0] + input[1] * weights[15][1] + input[2] * weights[15][2] + input[3] * weights[15][3] + input[4] * weights[15][4] + input[5] * weights[15][5] + input[6] * weights[15][6] + input[7] * weights[15][7] + input[8] * weights[15][8] + input[9] * weights[15][9] + input[10] * weights[15][10] + input[11] * weights[15][11] + input[12] * weights[15][12] + input[13] * weights[15][13] + input[14] * weights[15][14] + input[15] * weights[15][15] + input[16] * weights[15][16] + input[17] * weights[15][17] + input[18] * weights[15][18] + input[19] * weights[15][19] + input[20] * weights[15][20] + input[21] * weights[15][21] + input[22] * weights[15][22] + input[23] * weights[15][23] + input[24] * weights[15][24] + input[25] * weights[15][25] + input[26] * weights[15][26] + input[27] * weights[15][27] + input[28] * weights[15][28] + input[29] * weights[15][29] + input[30] * weights[15][30] + input[31] * weights[15][31] + input[32] * weights[15][32] + input[33] * weights[15][33] + input[34] * weights[15][34] + input[35] * weights[15][35]) / 10000 + biases[15]
    let weighted_sum17 = (input[0] * weights[16][0] + input[1] * weights[16][1] + input[2] * weights[16][2] + input[3] * weights[16][3] + input[4] * weights[16][4] + input[5] * weights[16][5] + input[6] * weights[16][6] + input[7] * weights[16][7] + input[8] * weights[16][8] + input[9] * weights[16][9] + input[10] * weights[16][10] + input[11] * weights[16][11] + input[12] * weights[16][12] + input[13] * weights[16][13] + input[14] * weights[16][14] + input[15] * weights[16][15] + input[16] * weights[16][16] + input[17] * weights[16][17] + input[18] * weights[16][18] + input[19] * weights[16][19] + input[20] * weights[16][20] + input[21] * weights[16][21] + input[22] * weights[16][22] + input[23] * weights[16][23] + input[24] * weights[16][24] + input[25] * weights[16][25] + input[26] * weights[16][26] + input[27] * weights[16][27] + input[28] * weights[16][28] + input[29] * weights[16][29] + input[30] * weights[16][30] + input[31] * weights[16][31] + input[32] * weights[16][32] + input[33] * weights[16][33] + input[34] * weights[16][34] + input[35] * weights[16][35]) / 10000 + biases[16]
    let weighted_sum18 = (input[0] * weights[17][0] + input[1] * weights[17][1] + input[2] * weights[17][2] + input[3] * weights[17][3] + input[4] * weights[17][4] + input[5] * weights[17][5] + input[6] * weights[17][6] + input[7] * weights[17][7] + input[8] * weights[17][8] + input[9] * weights[17][9] + input[10] * weights[17][10] + input[11] * weights[17][11] + input[12] * weights[17][12] + input[13] * weights[17][13] + input[14] * weights[17][14] + input[15] * weights[17][15] + input[16] * weights[17][16] + input[17] * weights[17][17] + input[18] * weights[17][18] + input[19] * weights[17][19] + input[20] * weights[17][20] + input[21] * weights[17][21] + input[22] * weights[17][22] + input[23] * weights[17][23] + input[24] * weights[17][24] + input[25] * weights[17][25] + input[26] * weights[17][26] + input[27] * weights[17][27] + input[28] * weights[17][28] + input[29] * weights[17][29] + input[30] * weights[17][30] + input[31] * weights[17][31] + input[32] * weights[17][32] + input[33] * weights[17][33] + input[34] * weights[17][34] + input[35] * weights[17][35]) / 10000 + biases[17]
    let weighted_sum19 = (input[0] * weights[18][0] + input[1] * weights[18][1] + input[2] * weights[18][2] + input[3] * weights[18][3] + input[4] * weights[18][4] + input[5] * weights[18][5] + input[6] * weights[18][6] + input[7] * weights[18][7] + input[8] * weights[18][8] + input[9] * weights[18][9] + input[10] * weights[18][10] + input[11] * weights[18][11] + input[12] * weights[18][12] + input[13] * weights[18][13] + input[14] * weights[18][14] + input[15] * weights[18][15] + input[16] * weights[18][16] + input[17] * weights[18][17] + input[18] * weights[18][18] + input[19] * weights[18][19] + input[20] * weights[18][20] + input[21] * weights[18][21] + input[22] * weights[18][22] + input[23] * weights[18][23] + input[24] * weights[18][24] + input[25] * weights[18][25] + input[26] * weights[18][26] + input[27] * weights[18][27] + input[28] * weights[18][28] + input[29] * weights[18][29] + input[30] * weights[18][30] + input[31] * weights[18][31] + input[32] * weights[18][32] + input[33] * weights[18][33] + input[34] * weights[18][34] + input[35] * weights[18][35]) / 10000 + biases[18]
    let weighted_sum20 = (input[0] * weights[19][0] + input[1] * weights[19][1] + input[2] * weights[19][2] + input[3] * weights[19][3] + input[4] * weights[19][4] + input[5] * weights[19][5] + input[6] * weights[19][6] + input[7] * weights[19][7] + input[8] * weights[19][8] + input[9] * weights[19][9] + input[10] * weights[19][10] + input[11] * weights[19][11] + input[12] * weights[19][12] + input[13] * weights[19][13] + input[14] * weights[19][14] + input[15] * weights[19][15] + input[16] * weights[19][16] + input[17] * weights[19][17] + input[18] * weights[19][18] + input[19] * weights[19][19] + input[20] * weights[19][20] + input[21] * weights[19][21] + input[22] * weights[19][22] + input[23] * weights[19][23] + input[24] * weights[19][24] + input[25] * weights[19][25] + input[26] * weights[19][26] + input[27] * weights[19][27] + input[28] * weights[19][28] + input[29] * weights[19][29] + input[30] * weights[19][30] + input[31] * weights[19][31] + input[32] * weights[19][32] + input[33] * weights[19][33] + input[34] * weights[19][34] + input[35] * weights[19][35]) / 10000 + biases[19]
    let weighted_sum21 = (input[0] * weights[20][0] + input[1] * weights[20][1] + input[2] * weights[20][2] + input[3] * weights[20][3] + input[4] * weights[20][4] + input[5] * weights[20][5] + input[6] * weights[20][6] + input[7] * weights[20][7] + input[8] * weights[20][8] + input[9] * weights[20][9] + input[10] * weights[20][10] + input[11] * weights[20][11] + input[12] * weights[20][12] + input[13] * weights[20][13] + input[14] * weights[20][14] + input[15] * weights[20][15] + input[16] * weights[20][16] + input[17] * weights[20][17] + input[18] * weights[20][18] + input[19] * weights[20][19] + input[20] * weights[20][20] + input[21] * weights[20][21] + input[22] * weights[20][22] + input[23] * weights[20][23] + input[24] * weights[20][24] + input[25] * weights[20][25] + input[26] * weights[20][26] + input[27] * weights[20][27] + input[28] * weights[20][28] + input[29] * weights[20][29] + input[30] * weights[20][30] + input[31] * weights[20][31] + input[32] * weights[20][32] + input[33] * weights[20][33] + input[34] * weights[20][34] + input[35] * weights[20][35]) / 10000 + biases[20]
    let weighted_sum22 = (input[0] * weights[21][0] + input[1] * weights[21][1] + input[2] * weights[21][2] + input[3] * weights[21][3] + input[4] * weights[21][4] + input[5] * weights[21][5] + input[6] * weights[21][6] + input[7] * weights[21][7] + input[8] * weights[21][8] + input[9] * weights[21][9] + input[10] * weights[21][10] + input[11] * weights[21][11] + input[12] * weights[21][12] + input[13] * weights[21][13] + input[14] * weights[21][14] + input[15] * weights[21][15] + input[16] * weights[21][16] + input[17] * weights[21][17] + input[18] * weights[21][18] + input[19] * weights[21][19] + input[20] * weights[21][20] + input[21] * weights[21][21] + input[22] * weights[21][22] + input[23] * weights[21][23] + input[24] * weights[21][24] + input[25] * weights[21][25] + input[26] * weights[21][26] + input[27] * weights[21][27] + input[28] * weights[21][28] + input[29] * weights[21][29] + input[30] * weights[21][30] + input[31] * weights[21][31] + input[32] * weights[21][32] + input[33] * weights[21][33] + input[34] * weights[21][34] + input[35] * weights[21][35]) / 10000 + biases[21]
    let weighted_sum23 = (input[0] * weights[22][0] + input[1] * weights[22][1] + input[2] * weights[22][2] + input[3] * weights[22][3] + input[4] * weights[22][4] + input[5] * weights[22][5] + input[6] * weights[22][6] + input[7] * weights[22][7] + input[8] * weights[22][8] + input[9] * weights[22][9] + input[10] * weights[22][10] + input[11] * weights[22][11] + input[12] * weights[22][12] + input[13] * weights[22][13] + input[14] * weights[22][14] + input[15] * weights[22][15] + input[16] * weights[22][16] + input[17] * weights[22][17] + input[18] * weights[22][18] + input[19] * weights[22][19] + input[20] * weights[22][20] + input[21] * weights[22][21] + input[22] * weights[22][22] + input[23] * weights[22][23] + input[24] * weights[22][24] + input[25] * weights[22][25] + input[26] * weights[22][26] + input[27] * weights[22][27] + input[28] * weights[22][28] + input[29] * weights[22][29] + input[30] * weights[22][30] + input[31] * weights[22][31] + input[32] * weights[22][32] + input[33] * weights[22][33] + input[34] * weights[22][34] + input[35] * weights[22][35]) / 10000 + biases[22]
    let weighted_sum24 = (input[0] * weights[23][0] + input[1] * weights[23][1] + input[2] * weights[23][2] + input[3] * weights[23][3] + input[4] * weights[23][4] + input[5] * weights[23][5] + input[6] * weights[23][6] + input[7] * weights[23][7] + input[8] * weights[23][8] + input[9] * weights[23][9] + input[10] * weights[23][10] + input[11] * weights[23][11] + input[12] * weights[23][12] + input[13] * weights[23][13] + input[14] * weights[23][14] + input[15] * weights[23][15] + input[16] * weights[23][16] + input[17] * weights[23][17] + input[18] * weights[23][18] + input[19] * weights[23][19] + input[20] * weights[23][20] + input[21] * weights[23][21] + input[22] * weights[23][22] + input[23] * weights[23][23] + input[24] * weights[23][24] + input[25] * weights[23][25] + input[26] * weights[23][26] + input[27] * weights[23][27] + input[28] * weights[23][28] + input[29] * weights[23][29] + input[30] * weights[23][30] + input[31] * weights[23][31] + input[32] * weights[23][32] + input[33] * weights[23][33] + input[34] * weights[23][34] + input[35] * weights[23][35]) / 10000 + biases[23]
    let weighted_sum25 = (input[0] * weights[24][0] + input[1] * weights[24][1] + input[2] * weights[24][2] + input[3] * weights[24][3] + input[4] * weights[24][4] + input[5] * weights[24][5] + input[6] * weights[24][6] + input[7] * weights[24][7] + input[8] * weights[24][8] + input[9] * weights[24][9] + input[10] * weights[24][10] + input[11] * weights[24][11] + input[12] * weights[24][12] + input[13] * weights[24][13] + input[14] * weights[24][14] + input[15] * weights[24][15] + input[16] * weights[24][16] + input[17] * weights[24][17] + input[18] * weights[24][18] + input[19] * weights[24][19] + input[20] * weights[24][20] + input[21] * weights[24][21] + input[22] * weights[24][22] + input[23] * weights[24][23] + input[24] * weights[24][24] + input[25] * weights[24][25] + input[26] * weights[24][26] + input[27] * weights[24][27] + input[28] * weights[24][28] + input[29] * weights[24][29] + input[30] * weights[24][30] + input[31] * weights[24][31] + input[32] * weights[24][32] + input[33] * weights[24][33] + input[34] * weights[24][34] + input[35] * weights[24][35]) / 10000 + biases[24]
    let weighted_sum26 = (input[0] * weights[25][0] + input[1] * weights[25][1] + input[2] * weights[25][2] + input[3] * weights[25][3] + input[4] * weights[25][4] + input[5] * weights[25][5] + input[6] * weights[25][6] + input[7] * weights[25][7] + input[8] * weights[25][8] + input[9] * weights[25][9] + input[10] * weights[25][10] + input[11] * weights[25][11] + input[12] * weights[25][12] + input[13] * weights[25][13] + input[14] * weights[25][14] + input[15] * weights[25][15] + input[16] * weights[25][16] + input[17] * weights[25][17] + input[18] * weights[25][18] + input[19] * weights[25][19] + input[20] * weights[25][20] + input[21] * weights[25][21] + input[22] * weights[25][22] + input[23] * weights[25][23] + input[24] * weights[25][24] + input[25] * weights[25][25] + input[26] * weights[25][26] + input[27] * weights[25][27] + input[28] * weights[25][28] + input[29] * weights[25][29] + input[30] * weights[25][30] + input[31] * weights[25][31] + input[32] * weights[25][32] + input[33] * weights[25][33] + input[34] * weights[25][34] + input[35] * weights[25][35]) / 10000 + biases[25]
    let weighted_sum27 = (input[0] * weights[26][0] + input[1] * weights[26][1] + input[2] * weights[26][2] + input[3] * weights[26][3] + input[4] * weights[26][4] + input[5] * weights[26][5] + input[6] * weights[26][6] + input[7] * weights[26][7] + input[8] * weights[26][8] + input[9] * weights[26][9] + input[10] * weights[26][10] + input[11] * weights[26][11] + input[12] * weights[26][12] + input[13] * weights[26][13] + input[14] * weights[26][14] + input[15] * weights[26][15] + input[16] * weights[26][16] + input[17] * weights[26][17] + input[18] * weights[26][18] + input[19] * weights[26][19] + input[20] * weights[26][20] + input[21] * weights[26][21] + input[22] * weights[26][22] + input[23] * weights[26][23] + input[24] * weights[26][24] + input[25] * weights[26][25] + input[26] * weights[26][26] + input[27] * weights[26][27] + input[28] * weights[26][28] + input[29] * weights[26][29] + input[30] * weights[26][30] + input[31] * weights[26][31] + input[32] * weights[26][32] + input[33] * weights[26][33] + input[34] * weights[26][34] + input[35] * weights[26][35]) / 10000 + biases[26]
    let weighted_sum28 = (input[0] * weights[27][0] + input[1] * weights[27][1] + input[2] * weights[27][2] + input[3] * weights[27][3] + input[4] * weights[27][4] + input[5] * weights[27][5] + input[6] * weights[27][6] + input[7] * weights[27][7] + input[8] * weights[27][8] + input[9] * weights[27][9] + input[10] * weights[27][10] + input[11] * weights[27][11] + input[12] * weights[27][12] + input[13] * weights[27][13] + input[14] * weights[27][14] + input[15] * weights[27][15] + input[16] * weights[27][16] + input[17] * weights[27][17] + input[18] * weights[27][18] + input[19] * weights[27][19] + input[20] * weights[27][20] + input[21] * weights[27][21] + input[22] * weights[27][22] + input[23] * weights[27][23] + input[24] * weights[27][24] + input[25] * weights[27][25] + input[26] * weights[27][26] + input[27] * weights[27][27] + input[28] * weights[27][28] + input[29] * weights[27][29] + input[30] * weights[27][30] + input[31] * weights[27][31] + input[32] * weights[27][32] + input[33] * weights[27][33] + input[34] * weights[27][34] + input[35] * weights[27][35]) / 10000 + biases[27]
    let weighted_sum29 = (input[0] * weights[28][0] + input[1] * weights[28][1] + input[2] * weights[28][2] + input[3] * weights[28][3] + input[4] * weights[28][4] + input[5] * weights[28][5] + input[6] * weights[28][6] + input[7] * weights[28][7] + input[8] * weights[28][8] + input[9] * weights[28][9] + input[10] * weights[28][10] + input[11] * weights[28][11] + input[12] * weights[28][12] + input[13] * weights[28][13] + input[14] * weights[28][14] + input[15] * weights[28][15] + input[16] * weights[28][16] + input[17] * weights[28][17] + input[18] * weights[28][18] + input[19] * weights[28][19] + input[20] * weights[28][20] + input[21] * weights[28][21] + input[22] * weights[28][22] + input[23] * weights[28][23] + input[24] * weights[28][24] + input[25] * weights[28][25] + input[26] * weights[28][26] + input[27] * weights[28][27] + input[28] * weights[28][28] + input[29] * weights[28][29] + input[30] * weights[28][30] + input[31] * weights[28][31] + input[32] * weights[28][32] + input[33] * weights[28][33] + input[34] * weights[28][34] + input[35] * weights[28][35]) / 10000 + biases[28]
    let weighted_sum30 = (input[0] * weights[29][0] + input[1] * weights[29][1] + input[2] * weights[29][2] + input[3] * weights[29][3] + input[4] * weights[29][4] + input[5] * weights[29][5] + input[6] * weights[29][6] + input[7] * weights[29][7] + input[8] * weights[29][8] + input[9] * weights[29][9] + input[10] * weights[29][10] + input[11] * weights[29][11] + input[12] * weights[29][12] + input[13] * weights[29][13] + input[14] * weights[29][14] + input[15] * weights[29][15] + input[16] * weights[29][16] + input[17] * weights[29][17] + input[18] * weights[29][18] + input[19] * weights[29][19] + input[20] * weights[29][20] + input[21] * weights[29][21] + input[22] * weights[29][22] + input[23] * weights[29][23] + input[24] * weights[29][24] + input[25] * weights[29][25] + input[26] * weights[29][26] + input[27] * weights[29][27] + input[28] * weights[29][28] + input[29] * weights[29][29] + input[30] * weights[29][30] + input[31] * weights[29][31] + input[32] * weights[29][32] + input[33] * weights[29][33] + input[34] * weights[29][34] + input[35] * weights[29][35]) / 10000 + biases[29]
    let weighted_sum31 = (input[0] * weights[30][0] + input[1] * weights[30][1] + input[2] * weights[30][2] + input[3] * weights[30][3] + input[4] * weights[30][4] + input[5] * weights[30][5] + input[6] * weights[30][6] + input[7] * weights[30][7] + input[8] * weights[30][8] + input[9] * weights[30][9] + input[10] * weights[30][10] + input[11] * weights[30][11] + input[12] * weights[30][12] + input[13] * weights[30][13] + input[14] * weights[30][14] + input[15] * weights[30][15] + input[16] * weights[30][16] + input[17] * weights[30][17] + input[18] * weights[30][18] + input[19] * weights[30][19] + input[20] * weights[30][20] + input[21] * weights[30][21] + input[22] * weights[30][22] + input[23] * weights[30][23] + input[24] * weights[30][24] + input[25] * weights[30][25] + input[26] * weights[30][26] + input[27] * weights[30][27] + input[28] * weights[30][28] + input[29] * weights[30][29] + input[30] * weights[30][30] + input[31] * weights[30][31] + input[32] * weights[30][32] + input[33] * weights[30][33] + input[34] * weights[30][34] + input[35] * weights[30][35]) / 10000 + biases[30]
    let weighted_sum32 = (input[0] * weights[31][0] + input[1] * weights[31][1] + input[2] * weights[31][2] + input[3] * weights[31][3] + input[4] * weights[31][4] + input[5] * weights[31][5] + input[6] * weights[31][6] + input[7] * weights[31][7] + input[8] * weights[31][8] + input[9] * weights[31][9] + input[10] * weights[31][10] + input[11] * weights[31][11] + input[12] * weights[31][12] + input[13] * weights[31][13] + input[14] * weights[31][14] + input[15] * weights[31][15] + input[16] * weights[31][16] + input[17] * weights[31][17] + input[18] * weights[31][18] + input[19] * weights[31][19] + input[20] * weights[31][20] + input[21] * weights[31][21] + input[22] * weights[31][22] + input[23] * weights[31][23] + input[24] * weights[31][24] + input[25] * weights[31][25] + input[26] * weights[31][26] + input[27] * weights[31][27] + input[28] * weights[31][28] + input[29] * weights[31][29] + input[30] * weights[31][30] + input[31] * weights[31][31] + input[32] * weights[31][32] + input[33] * weights[31][33] + input[34] * weights[31][34] + input[35] * weights[31][35]) / 10000 + biases[31]
    let weighted_sum33 = (input[0] * weights[32][0] + input[1] * weights[32][1] + input[2] * weights[32][2] + input[3] * weights[32][3] + input[4] * weights[32][4] + input[5] * weights[32][5] + input[6] * weights[32][6] + input[7] * weights[32][7] + input[8] * weights[32][8] + input[9] * weights[32][9] + input[10] * weights[32][10] + input[11] * weights[32][11] + input[12] * weights[32][12] + input[13] * weights[32][13] + input[14] * weights[32][14] + input[15] * weights[32][15] + input[16] * weights[32][16] + input[17] * weights[32][17] + input[18] * weights[32][18] + input[19] * weights[32][19] + input[20] * weights[32][20] + input[21] * weights[32][21] + input[22] * weights[32][22] + input[23] * weights[32][23] + input[24] * weights[32][24] + input[25] * weights[32][25] + input[26] * weights[32][26] + input[27] * weights[32][27] + input[28] * weights[32][28] + input[29] * weights[32][29] + input[30] * weights[32][30] + input[31] * weights[32][31] + input[32] * weights[32][32] + input[33] * weights[32][33] + input[34] * weights[32][34] + input[35] * weights[32][35]) / 10000 + biases[32]
    let weighted_sum34 = (input[0] * weights[33][0] + input[1] * weights[33][1] + input[2] * weights[33][2] + input[3] * weights[33][3] + input[4] * weights[33][4] + input[5] * weights[33][5] + input[6] * weights[33][6] + input[7] * weights[33][7] + input[8] * weights[33][8] + input[9] * weights[33][9] + input[10] * weights[33][10] + input[11] * weights[33][11] + input[12] * weights[33][12] + input[13] * weights[33][13] + input[14] * weights[33][14] + input[15] * weights[33][15] + input[16] * weights[33][16] + input[17] * weights[33][17] + input[18] * weights[33][18] + input[19] * weights[33][19] + input[20] * weights[33][20] + input[21] * weights[33][21] + input[22] * weights[33][22] + input[23] * weights[33][23] + input[24] * weights[33][24] + input[25] * weights[33][25] + input[26] * weights[33][26] + input[27] * weights[33][27] + input[28] * weights[33][28] + input[29] * weights[33][29] + input[30] * weights[33][30] + input[31] * weights[33][31] + input[32] * weights[33][32] + input[33] * weights[33][33] + input[34] * weights[33][34] + input[35] * weights[33][35]) / 10000 + biases[33]
    let weighted_sum35 = (input[0] * weights[34][0] + input[1] * weights[34][1] + input[2] * weights[34][2] + input[3] * weights[34][3] + input[4] * weights[34][4] + input[5] * weights[34][5] + input[6] * weights[34][6] + input[7] * weights[34][7] + input[8] * weights[34][8] + input[9] * weights[34][9] + input[10] * weights[34][10] + input[11] * weights[34][11] + input[12] * weights[34][12] + input[13] * weights[34][13] + input[14] * weights[34][14] + input[15] * weights[34][15] + input[16] * weights[34][16] + input[17] * weights[34][17] + input[18] * weights[34][18] + input[19] * weights[34][19] + input[20] * weights[34][20] + input[21] * weights[34][21] + input[22] * weights[34][22] + input[23] * weights[34][23] + input[24] * weights[34][24] + input[25] * weights[34][25] + input[26] * weights[34][26] + input[27] * weights[34][27] + input[28] * weights[34][28] + input[29] * weights[34][29] + input[30] * weights[34][30] + input[31] * weights[34][31] + input[32] * weights[34][32] + input[33] * weights[34][33] + input[34] * weights[34][34] + input[35] * weights[34][35]) / 10000 + biases[34]
    let weighted_sum36 = (input[0] * weights[35][0] + input[1] * weights[35][1] + input[2] * weights[35][2] + input[3] * weights[35][3] + input[4] * weights[35][4] + input[5] * weights[35][5] + input[6] * weights[35][6] + input[7] * weights[35][7] + input[8] * weights[35][8] + input[9] * weights[35][9] + input[10] * weights[35][10] + input[11] * weights[35][11] + input[12] * weights[35][12] + input[13] * weights[35][13] + input[14] * weights[35][14] + input[15] * weights[35][15] + input[16] * weights[35][16] + input[17] * weights[35][17] + input[18] * weights[35][18] + input[19] * weights[35][19] + input[20] * weights[35][20] + input[21] * weights[35][21] + input[22] * weights[35][22] + input[23] * weights[35][23] + input[24] * weights[35][24] + input[25] * weights[35][25] + input[26] * weights[35][26] + input[27] * weights[35][27] + input[28] * weights[35][28] + input[29] * weights[35][29] + input[30] * weights[35][30] + input[31] * weights[35][31] + input[32] * weights[35][32] + input[33] * weights[35][33] + input[34] * weights[35][34] + input[35] * weights[35][35]) / 10000 + biases[35]
    [weighted_sum1, weighted_sum2, weighted_sum3, weighted_sum4, weighted_sum5, weighted_sum6, weighted_sum7, weighted_sum8, weighted_sum9, weighted_sum10, weighted_sum11, weighted_sum12, weighted_sum13, weighted_sum14, weighted_sum15, weighted_sum16, weighted_sum17, weighted_sum18, weighted_sum19, weighted_sum20, weighted_sum21, weighted_sum22, weighted_sum23, weighted_sum24, weighted_sum25, weighted_sum26, weighted_sum27, weighted_sum28, weighted_sum29, weighted_sum30, weighted_sum31, weighted_sum32, weighted_sum33, weighted_sum34, weighted_sum35, weighted_sum36]
}

func linear_forward_3(input: List[Int], weights: List[List[Int]], biases: List[Int]) = {
    let weighted_sum1 = (input[0] * weights[0][0] + input[1] * weights[0][1] + input[2] * weights[0][2] + input[3] * weights[0][3] + input[4] * weights[0][4] + input[5] * weights[0][5] + input[6] * weights[0][6] + input[7] * weights[0][7] + input[8] * weights[0][8] + input[9] * weights[0][9] + input[10] * weights[0][10] + input[11] * weights[0][11] + input[12] * weights[0][12] + input[13] * weights[0][13] + input[14] * weights[0][14] + input[15] * weights[0][15] + input[16] * weights[0][16] + input[17] * weights[0][17] + input[18] * weights[0][18] + input[19] * weights[0][19] + input[20] * weights[0][20] + input[21] * weights[0][21] + input[22] * weights[0][22] + input[23] * weights[0][23] + input[24] * weights[0][24] + input[25] * weights[0][25] + input[26] * weights[0][26] + input[27] * weights[0][27] + input[28] * weights[0][28] + input[29] * weights[0][29] + input[30] * weights[0][30] + input[31] * weights[0][31] + input[32] * weights[0][32] + input[33] * weights[0][33] + input[34] * weights[0][34] + input[35] * weights[0][35]) / 10000 + biases[0]
    let weighted_sum2 = (input[0] * weights[1][0] + input[1] * weights[1][1] + input[2] * weights[1][2] + input[3] * weights[1][3] + input[4] * weights[1][4] + input[5] * weights[1][5] + input[6] * weights[1][6] + input[7] * weights[1][7] + input[8] * weights[1][8] + input[9] * weights[1][9] + input[10] * weights[1][10] + input[11] * weights[1][11] + input[12] * weights[1][12] + input[13] * weights[1][13] + input[14] * weights[1][14] + input[15] * weights[1][15] + input[16] * weights[1][16] + input[17] * weights[1][17] + input[18] * weights[1][18] + input[19] * weights[1][19] + input[20] * weights[1][20] + input[21] * weights[1][21] + input[22] * weights[1][22] + input[23] * weights[1][23] + input[24] * weights[1][24] + input[25] * weights[1][25] + input[26] * weights[1][26] + input[27] * weights[1][27] + input[28] * weights[1][28] + input[29] * weights[1][29] + input[30] * weights[1][30] + input[31] * weights[1][31] + input[32] * weights[1][32] + input[33] * weights[1][33] + input[34] * weights[1][34] + input[35] * weights[1][35]) / 10000 + biases[1]
    let weighted_sum3 = (input[0] * weights[2][0] + input[1] * weights[2][1] + input[2] * weights[2][2] + input[3] * weights[2][3] + input[4] * weights[2][4] + input[5] * weights[2][5] + input[6] * weights[2][6] + input[7] * weights[2][7] + input[8] * weights[2][8] + input[9] * weights[2][9] + input[10] * weights[2][10] + input[11] * weights[2][11] + input[12] * weights[2][12] + input[13] * weights[2][13] + input[14] * weights[2][14] + input[15] * weights[2][15] + input[16] * weights[2][16] + input[17] * weights[2][17] + input[18] * weights[2][18] + input[19] * weights[2][19] + input[20] * weights[2][20] + input[21] * weights[2][21] + input[22] * weights[2][22] + input[23] * weights[2][23] + input[24] * weights[2][24] + input[25] * weights[2][25] + input[26] * weights[2][26] + input[27] * weights[2][27] + input[28] * weights[2][28] + input[29] * weights[2][29] + input[30] * weights[2][30] + input[31] * weights[2][31] + input[32] * weights[2][32] + input[33] * weights[2][33] + input[34] * weights[2][34] + input[35] * weights[2][35]) / 10000 + biases[2]
    let weighted_sum4 = (input[0] * weights[3][0] + input[1] * weights[3][1] + input[2] * weights[3][2] + input[3] * weights[3][3] + input[4] * weights[3][4] + input[5] * weights[3][5] + input[6] * weights[3][6] + input[7] * weights[3][7] + input[8] * weights[3][8] + input[9] * weights[3][9] + input[10] * weights[3][10] + input[11] * weights[3][11] + input[12] * weights[3][12] + input[13] * weights[3][13] + input[14] * weights[3][14] + input[15] * weights[3][15] + input[16] * weights[3][16] + input[17] * weights[3][17] + input[18] * weights[3][18] + input[19] * weights[3][19] + input[20] * weights[3][20] + input[21] * weights[3][21] + input[22] * weights[3][22] + input[23] * weights[3][23] + input[24] * weights[3][24] + input[25] * weights[3][25] + input[26] * weights[3][26] + input[27] * weights[3][27] + input[28] * weights[3][28] + input[29] * weights[3][29] + input[30] * weights[3][30] + input[31] * weights[3][31] + input[32] * weights[3][32] + input[33] * weights[3][33] + input[34] * weights[3][34] + input[35] * weights[3][35]) / 10000 + biases[3]
    let weighted_sum5 = (input[0] * weights[4][0] + input[1] * weights[4][1] + input[2] * weights[4][2] + input[3] * weights[4][3] + input[4] * weights[4][4] + input[5] * weights[4][5] + input[6] * weights[4][6] + input[7] * weights[4][7] + input[8] * weights[4][8] + input[9] * weights[4][9] + input[10] * weights[4][10] + input[11] * weights[4][11] + input[12] * weights[4][12] + input[13] * weights[4][13] + input[14] * weights[4][14] + input[15] * weights[4][15] + input[16] * weights[4][16] + input[17] * weights[4][17] + input[18] * weights[4][18] + input[19] * weights[4][19] + input[20] * weights[4][20] + input[21] * weights[4][21] + input[22] * weights[4][22] + input[23] * weights[4][23] + input[24] * weights[4][24] + input[25] * weights[4][25] + input[26] * weights[4][26] + input[27] * weights[4][27] + input[28] * weights[4][28] + input[29] * weights[4][29] + input[30] * weights[4][30] + input[31] * weights[4][31] + input[32] * weights[4][32] + input[33] * weights[4][33] + input[34] * weights[4][34] + input[35] * weights[4][35]) / 10000 + biases[4]
    let weighted_sum6 = (input[0] * weights[5][0] + input[1] * weights[5][1] + input[2] * weights[5][2] + input[3] * weights[5][3] + input[4] * weights[5][4] + input[5] * weights[5][5] + input[6] * weights[5][6] + input[7] * weights[5][7] + input[8] * weights[5][8] + input[9] * weights[5][9] + input[10] * weights[5][10] + input[11] * weights[5][11] + input[12] * weights[5][12] + input[13] * weights[5][13] + input[14] * weights[5][14] + input[15] * weights[5][15] + input[16] * weights[5][16] + input[17] * weights[5][17] + input[18] * weights[5][18] + input[19] * weights[5][19] + input[20] * weights[5][20] + input[21] * weights[5][21] + input[22] * weights[5][22] + input[23] * weights[5][23] + input[24] * weights[5][24] + input[25] * weights[5][25] + input[26] * weights[5][26] + input[27] * weights[5][27] + input[28] * weights[5][28] + input[29] * weights[5][29] + input[30] * weights[5][30] + input[31] * weights[5][31] + input[32] * weights[5][32] + input[33] * weights[5][33] + input[34] * weights[5][34] + input[35] * weights[5][35]) / 10000 + biases[5]
    let weighted_sum7 = (input[0] * weights[6][0] + input[1] * weights[6][1] + input[2] * weights[6][2] + input[3] * weights[6][3] + input[4] * weights[6][4] + input[5] * weights[6][5] + input[6] * weights[6][6] + input[7] * weights[6][7] + input[8] * weights[6][8] + input[9] * weights[6][9] + input[10] * weights[6][10] + input[11] * weights[6][11] + input[12] * weights[6][12] + input[13] * weights[6][13] + input[14] * weights[6][14] + input[15] * weights[6][15] + input[16] * weights[6][16] + input[17] * weights[6][17] + input[18] * weights[6][18] + input[19] * weights[6][19] + input[20] * weights[6][20] + input[21] * weights[6][21] + input[22] * weights[6][22] + input[23] * weights[6][23] + input[24] * weights[6][24] + input[25] * weights[6][25] + input[26] * weights[6][26] + input[27] * weights[6][27] + input[28] * weights[6][28] + input[29] * weights[6][29] + input[30] * weights[6][30] + input[31] * weights[6][31] + input[32] * weights[6][32] + input[33] * weights[6][33] + input[34] * weights[6][34] + input[35] * weights[6][35]) / 10000 + biases[6]
    let weighted_sum8 = (input[0] * weights[7][0] + input[1] * weights[7][1] + input[2] * weights[7][2] + input[3] * weights[7][3] + input[4] * weights[7][4] + input[5] * weights[7][5] + input[6] * weights[7][6] + input[7] * weights[7][7] + input[8] * weights[7][8] + input[9] * weights[7][9] + input[10] * weights[7][10] + input[11] * weights[7][11] + input[12] * weights[7][12] + input[13] * weights[7][13] + input[14] * weights[7][14] + input[15] * weights[7][15] + input[16] * weights[7][16] + input[17] * weights[7][17] + input[18] * weights[7][18] + input[19] * weights[7][19] + input[20] * weights[7][20] + input[21] * weights[7][21] + input[22] * weights[7][22] + input[23] * weights[7][23] + input[24] * weights[7][24] + input[25] * weights[7][25] + input[26] * weights[7][26] + input[27] * weights[7][27] + input[28] * weights[7][28] + input[29] * weights[7][29] + input[30] * weights[7][30] + input[31] * weights[7][31] + input[32] * weights[7][32] + input[33] * weights[7][33] + input[34] * weights[7][34] + input[35] * weights[7][35]) / 10000 + biases[7]
    let weighted_sum9 = (input[0] * weights[8][0] + input[1] * weights[8][1] + input[2] * weights[8][2] + input[3] * weights[8][3] + input[4] * weights[8][4] + input[5] * weights[8][5] + input[6] * weights[8][6] + input[7] * weights[8][7] + input[8] * weights[8][8] + input[9] * weights[8][9] + input[10] * weights[8][10] + input[11] * weights[8][11] + input[12] * weights[8][12] + input[13] * weights[8][13] + input[14] * weights[8][14] + input[15] * weights[8][15] + input[16] * weights[8][16] + input[17] * weights[8][17] + input[18] * weights[8][18] + input[19] * weights[8][19] + input[20] * weights[8][20] + input[21] * weights[8][21] + input[22] * weights[8][22] + input[23] * weights[8][23] + input[24] * weights[8][24] + input[25] * weights[8][25] + input[26] * weights[8][26] + input[27] * weights[8][27] + input[28] * weights[8][28] + input[29] * weights[8][29] + input[30] * weights[8][30] + input[31] * weights[8][31] + input[32] * weights[8][32] + input[33] * weights[8][33] + input[34] * weights[8][34] + input[35] * weights[8][35]) / 10000 + biases[8]
    [weighted_sum1, weighted_sum2, weighted_sum3, weighted_sum4, weighted_sum5, weighted_sum6, weighted_sum7, weighted_sum8, weighted_sum9]
}

# Activation Functions
# ReLU function
func relu(input: Int) = {
    if (input < 0) then 0
    else input
}
# ReLU activation function for a list of values
func relu_activation(inputs: List[Int], num_outputs: Int) = {
    [relu(inputs[0]), relu(inputs[1]), relu(inputs[2]), relu(inputs[3]), relu(inputs[4]), relu(inputs[5]), relu(inputs[6]), relu(inputs[7]), relu(inputs[8]), relu(inputs[9]), relu(inputs[10]), relu(inputs[11]), relu(inputs[12]), relu(inputs[13]), relu(inputs[14]), relu(inputs[15]), relu(inputs[16]), relu(inputs[17]), relu(inputs[18]), relu(inputs[19]), relu(inputs[20]), relu(inputs[21]), relu(inputs[22]), relu(inputs[23]), relu(inputs[24]), relu(inputs[25]), relu(inputs[26]), relu(inputs[27]), relu(inputs[28]), relu(inputs[29]), relu(inputs[30]), relu(inputs[31]), relu(inputs[32]), relu(inputs[33]), relu(inputs[34]), relu(inputs[35])]
}

# Sigmoid function
func sigmoid(input: Int) = {
    if (input < -10000) then 0
    else if (input > 10000) then 10000
    else 5000 + input / 2
}
# Sigmoid activation function for a list of values
func sigmoid_activation(inputs: List[Int], num_outputs: Int) = {
    [sigmoid(inputs[0]), sigmoid(inputs[1]), sigmoid(inputs[2]), sigmoid(inputs[3]), sigmoid(inputs[4]), sigmoid(inputs[5]), sigmoid(inputs[6]), sigmoid(inputs[7]), sigmoid(inputs[8])]
}

# Predict Function
@Callable(i)
func predict(x1: Int, x2: Int, x3: Int, x4: Int, x5: Int, x6: Int, x7: Int, x8: Int, x9: Int) = {
    # Scale inputs
    let x1_scaled = x1 * 10000
    let x2_scaled = x2 * 10000
    let x3_scaled = x3 * 10000
    let x4_scaled = x4 * 10000
    let x5_scaled = x5 * 10000
    let x6_scaled = x6 * 10000
    let x7_scaled = x7 * 10000
    let x8_scaled = x8 * 10000
    let x9_scaled = x9 * 10000
    let inputs = [x1_scaled, x2_scaled, x3_scaled, x4_scaled, x5_scaled, x6_scaled, x7_scaled, x8_scaled, x9_scaled]
    let z1 = linear_forward_1(inputs, weights_layer_1, biases_layer_1)
    let a1 = relu_activation(z1, 36)
    let z2 = linear_forward_2(a1, weights_layer_2, biases_layer_2)
    let a2 = relu_activation(z2, 36)
    let z3 = linear_forward_3(a2, weights_layer_3, biases_layer_3)
    let a3 = sigmoid_activation(z3, 9)
    # Scaling back the output
    let result0 = a3[0] / 10000
    let result1 = a3[1] / 10000
    let result2 = a3[2] / 10000
    let result3 = a3[3] / 10000
    let result4 = a3[4] / 10000
    let result5 = a3[5] / 10000
    let result6 = a3[6] / 10000
    let result7 = a3[7] / 10000
    let result8 = a3[8] / 10000
    let debug_outputs = []
    [
        IntegerEntry("move_prediction_0", result0),
        IntegerEntry("move_prediction_1", result1),
        IntegerEntry("move_prediction_2", result2),
        IntegerEntry("move_prediction_3", result3),
        IntegerEntry("move_prediction_4", result4),
        IntegerEntry("move_prediction_5", result5),
        IntegerEntry("move_prediction_6", result6),
        IntegerEntry("move_prediction_7", result7),
        IntegerEntry("move_prediction_8", result8)
    ] ++ debug_outputs
}